<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>clb中http自动跳转到https以及四层七层收集真实IP</title>
    <url>/2023/05/09/clb%E4%B8%ADhttp%E8%87%AA%E5%8A%A8%E8%B7%B3%E8%BD%AC%E5%88%B0https%E4%BB%A5%E5%8F%8A%E5%9B%9B%E5%B1%82%E4%B8%83%E5%B1%82%E6%94%B6%E9%9B%86%E7%9C%9F%E5%AE%9EIP/</url>
    <content><![CDATA[<p>一、负载均衡里面的重定向<br>创建HTTP监听并配置重定向<br>在监听页签，单击添加监听。<br>在协议&amp;监听配置向导，根据以下信息配置监听，然后单击下一步。<br>高级配置<br>单击修改展开高级配置。<br>本文仅修改监听转发，其余参数保持默认配置。<br>监听转发<br>选择是否将HTTP监听的流量转发到HTTPS监听。<br>监听转发开启后，该CLB实例所有来自HTTP:80的访问都会转发至HTTPS:443，并根据HTTPS:443的监听配置进行转发。</p>
<p>二、收集真实的IP<br><span class="exturl"><a class="exturl__link"   href="https://help.aliyun.com/document_detail/54007.html?spm=a2c4g.89151.0.0.1776325fv7chcS" >https://help.aliyun.com/document_detail/54007.html?spm=a2c4g.89151.0.0.1776325fv7chcS</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>负载均衡通常分为四层负载均衡和七层负载均衡:<br>四层负载均衡:</p>
<ul>
<li>作用于OSI模型的传输层,主要根据TCP&#x2F;UDP报文进行转发。</li>
<li>可以实现基于源IP&#x2F;端口,目标IP&#x2F;端口进行简单的转发和重定向。</li>
<li>只能根据报文头信息来选择后端,对报文内容无能为力。</li>
<li>典型应用是基本的TCP&#x2F;UDP代理或基于IP进行的简单分流。<br>七层负载均衡:</li>
<li>作用于OSI模型的应用层,根据HTTP&#x2F;HTTPS等应用层协议进行转发。</li>
<li>可以根据报文内容中的HOST头、URI、Cookies等信息来选择后端。 </li>
<li>能够更精细地控制和转发不同类型的应用请求。</li>
<li>典型应用是基于HTTP&#x2F;HTTPS的代理和负载均衡。<br>所以,四层和七层负载均衡的主要区别在于:<br>四层负载均衡:</li>
<li>仅根据传输层报文进行转发,对内容无能为力。</li>
<li>只能根据源&#x2F;目标IP,端口等选择后端。</li>
<li>适用于简单的TCP&#x2F;UDP代理与分流。<br>七层负载均衡:</li>
<li>可以根据应用层协议和报文内容进行转发。 </li>
<li>可以根据HOST,URI,Cookies等信息选择后端。</li>
<li>适用于更精细和智能的HTTP&#x2F;HTTPS代理与负载均衡。<br>所以选择四层还是七层负载均衡,取决于你的具体场景:</li>
<li>如果只需要简单地根据IP&#x2F;端口进行TCP&#x2F;UDP代理或分流,四层即可。</li>
<li>如果需要更复杂的应用层代理和负载均衡,需要根据报文内容分发,选择七层。<br>简而言之:</li>
<li>四层负载均衡更简单,只转发传输层;七层负载均衡更智能,可以转发应用层。</li>
<li>四层根据网络层信息转发;七层可以根据应用层信息转发。</li>
<li>四层适用于基本的TCP&#x2F;UDP代理;七层适用于HTTP&#x2F;HTTPS代理和负载均衡。</li>
</ul>
<p>三、首先clb选择七层，并开启附加HTTP头字段<br>包含（选择您要添加的自定义HTTP头字段：<br>添加X-Forwarded-For头字段获取客户端真实IP。<br>添加SLB-ID头字段获取负载均衡实例的ID。<br>添加SLB-IP头字段获取负载均衡实例IP地址。<br>添加X-Forwarded-Proto头字段获取负载均衡的监听协议。<br>添加X-Forwarded-Port头字段获取负载均衡实例的监听端口。<br>添加X-Forwarded-Client-srcport头字段获取访问负载均衡实例客户端的端口。）</p>
<p>当选择七层负载均衡,并且在服务器或负载均衡上开启XFF(X-Forwarded-For)功能时:</p>
<ul>
<li>客户端发送请求到负载均衡器,请求头中不包含XFF字段。</li>
<li>负载均衡器根据负载均衡规则,选择一台后端服务器,并在转发请求时在请求头中添加XFF字段,内容为客户端IP和负载均衡器IP。</li>
<li>后端服务器接收到请求,可以从请求头中的XFF字段获取客户端真实IP。<br>所以,在这种情况下,Nginx作为后端服务器,可以这样获取客户端真实IP:<br>nginx<br>proxy_set_header X-Real-IP $remote_addr;  # 获取客户端IP<br>proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # 继续添加XFF</li>
<li>使用$remote_addr变量可以获取到XFF字段中的第一个IP,也就是客户端IP</li>
<li>使用$proxy_add_x_forwarded_for可以在转发至上游Web服务器时,继续添加XFF字段而不覆盖原有内容<br>这样,无论请求经过了几层代理,后端Web服务器都可以通过XFF获取到客户端真实IP。<br>所以,要在Nginx后端获取客户端真实IP,主要步骤是:</li>
</ul>
<ol>
<li>确保前端负载均衡器开启XFF功能,可以添加客户端IP</li>
<li>在Nginx配置中添加上述两个proxy_set_header指令</li>
<li>重新加载Nginx配置使指令生效</li>
<li>查看Nginx日志或接收到的请求头,会有XFF字段,并且第一个IP为客户端IP<br>XFF的全称是X-Forwarded-For, 是一种HTTP头字段,用于在代理服务器之间转发客户端信息。它的出现就是为了解决通过多层代理转发情况下,请求丢失客户端信息的问题。</li>
</ol>
<p>四、负载均衡勾选之后，修改nginx conf,修改日志格式，重载nginx配置<br>修改log_format日志记录格式。<br>打开nginx.conf配置文件，定位到http配置部分的log_format。<br>在log_format中添加x-forwarded-for字段，替换默认的remote-address字段。<br>修改后的log_format内容如下：<br>log_format  main  ‘$http_x_forwarded_for - $remote_user [$time_local] “$request” ‘ ‘$status $body_bytes_sent “$http_referer” ‘ ‘“$http_user_agent” ‘</p>
<p>添加配置：<br>        proxy_set_header Host $host;<br>        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br>        proxy_set_header X-Forwarded-For $remote_addr;<br>        proxy_set_header SLB-ID $server_name;<br>        proxy_set_header X-Forwarded-Proto $scheme;</p>
<p>不做任何操作的时候，默认会取去负载均衡的内部地址，或者是waf的回源地址。而不是真实的IP,当然IDC环境无需担心这种操作</p>
<p>其他知识：<br>放行WAF回源IP段<br>WAF使用特定的回源IP段，将经过防护引擎检测后的正常流量转发回网站域名的源站服务器。<br>网站接入WAF进行防护后，您需要将回源IP段添加到源站安全软件的白名单中，放行该回源IP段。本文介绍如何放行WAF回源IP段。<br>登录Web应用防火墙控制台，并在顶部菜单栏，选择WAF实例的资源组和地域（中国内地、非中国内地）。<br>在左侧导航栏，选择系统管理 &gt; 产品信息。<br>在产品信息页面右下方的回源IP段区域，单击复制全部IP。<br>回源IP段区域实时显示WAF回源IP段。<br>将回源IP段添加到源站安全软件的白名单中。<br>警告 如果您没有在源站设置放行WAF的回源IP段，则WAF转发回源站的正常业务请求可能会被误拦截，导致业务中断。</p>
]]></content>
  </entry>
  <entry>
    <title>flask创建自定义网站导航</title>
    <url>/2023/03/09/flask%E5%88%9B%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E7%AB%99%E5%AF%BC%E8%88%AA/</url>
    <content><![CDATA[<p>Flask: Flask是Python的一个轻量级Web应用程序框架。它允许开发人员使用Python编写Web应用程序，并在一个简单的、易于理解的方式中组织和部署它们。</p>
<p>render_template: render_template是Flask框架中的一个函数，将HTML模板和Python代码结合，以动态地生成Web页面。</p>
<p>redirect和url_for: redirect和url_for是Flask框架中的两个功能。redirect函数将用户重定向到另一个页面，而url_for函数获取应用程序路由的URL。</p>
<p>SQLAlchemy: SQLAlchemy是一个Python SQL工具包和ORM（Object Relational Mapper）。它使开发人员能够通过Python代码管理和交互数据库。</p>
<p>CompanyForm: CompanyForm是一个表单类，它使用Flask框架中的表单类构建器来定义一个表单。这样，开发人员可以在Flask应用程序中轻松创建表单，并将其发送到Web浏览器，收集数据并将其发送回服务器以进行处理。</p>
<p>创建一个名为 “app.py” 的文件，并将以下代码添加到其中：</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">from flask import Flask, render_template, redirect, url_for</span><br><span class="line">from flask_sqlalchemy import SQLAlchemy</span><br><span class="line">from forms import CompanyForm</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[&#x27;SECRET_KEY&#x27;] = &#x27;secret_key&#x27;</span><br><span class="line">app.config[&#x27;SQLALCHEMY_DATABASE_URI&#x27;] = &#x27;sqlite:///companies.db&#x27;</span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line">class Company(db.Model):</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)</span><br><span class="line">    name = db.Column(db.String(50), nullable=False)</span><br><span class="line">    website = db.Column(db.String(100))</span><br><span class="line">    location = db.Column(db.String(30))</span><br><span class="line">    description = db.Column(db.String(200))</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return self.name</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/&#x27;)</span><br><span class="line">def index():</span><br><span class="line">    companies = Company.query.all()</span><br><span class="line">    return render_template(&#x27;index.html&#x27;, companies=companies)</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/add&#x27;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])</span><br><span class="line">def add_company():</span><br><span class="line">    form = CompanyForm()</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        new_company = Company(</span><br><span class="line">            name=form.name.data,</span><br><span class="line">            website=form.website.data,</span><br><span class="line">            location=form.location.data,</span><br><span class="line">            description=form.description.data</span><br><span class="line">        )</span><br><span class="line">        db.session.add(new_company)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        return redirect(url_for(&#x27;index&#x27;))</span><br><span class="line">    return render_template(&#x27;add.html&#x27;, form=form)</span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app.run(debug=True)</span><br><span class="line">    </span><br></pre></td></tr></table></div></figure>





<p>创建一个名为 “forms.py” 的文件，并将以下代码添加到其中：</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">from flask_wtf import FlaskForm</span><br><span class="line">from wtforms import StringField, TextAreaField, SubmitField</span><br><span class="line">from wtforms.validators import DataRequired</span><br><span class="line"></span><br><span class="line">class CompanyForm(FlaskForm):</span><br><span class="line">    name = StringField(&#x27;Name&#x27;, validators=[DataRequired()])</span><br><span class="line">    website = StringField(&#x27;Website&#x27;)</span><br><span class="line">    location = StringField(&#x27;Location&#x27;)</span><br><span class="line">    description = TextAreaField(&#x27;Description&#x27;)</span><br><span class="line">    submit = SubmitField(&#x27;Add Company&#x27;)</span><br></pre></td></tr></table></div></figure>


<p>在根目录下创建一个名为 “templates” 的文件夹，并在其中创建以下三个 HTML 模板文件：</p>
<p>(1) “index.html” 模板文件</p>
<p>（2）”add.html“ 添加文件</p>
<p>（3）”base.html”</p>
<p>页面提交报错转移至<span class="exturl"><a class="exturl__link"   href="https://gitee.com/qinly_work/flasknav.git" >https://gitee.com/qinly_work/flasknav.git</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>运行 “app.py” 文件，并在浏览器中访问 “<span class="exturl"><a class="exturl__link"   href="http://localhost:5000/" >http://localhost:5000/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>“ 即可查看公司导航网站。<br>这些代码例子希望可以帮助到你。</p>
<p>nginx配置</p>
<p>这是一个简单的 nginx 配置文件示例，可以用于将您的 Flask 应用程序部署到生产环境：</p>
<p>Copy code<br>server {<br>    # 监听本机 80 端口<br>    listen 80;<br>    # 添加您的域名或 IP 地址<br>    server_name example.com;<br>    # 定义您的项目的根目录<br>    root &#x2F;path&#x2F;to&#x2F;your&#x2F;project&#x2F;directory;<br>    # 配置访问日志和错误日志的路径<br>    access_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log;<br>    error_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log;<br>    # 配置静态文件的缓存时间<br>    expires 30d;<br>    # 定义对 “favicon.ico” 文件的请求的处理方式<br>    location &#x2F;favicon.ico {<br>        alias &#x2F;path&#x2F;to&#x2F;your&#x2F;project&#x2F;directory&#x2F;static&#x2F;favicon.ico;<br>    }<br>    # 配置应用程序的代理<br>    location &#x2F; {<br>        proxy_pass <span class="exturl"><a class="exturl__link"   href="http://127.0.0.1:5000/" >http://127.0.0.1:5000</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>;<br>        proxy_set_header Host $host;<br>        proxy_set_header X-Real-IP $remote_addr;<br>    }<br>}<br>在上面的配置文件中，我们使用 server 指令定义了该 nginx 服务器的基本配置信息。 listen 指令用于定义服务器将在其中监听的端口。 server_name 指令用于定义该服务器所关联的域名或 IP 地址。 root 指令指定我们应用程序的主目录所在位置，以便 nginx 能够访问其静态资源。 access_log 和 error_log 指令用于配置访问日志和错误日志的文件路径。 expires 指令用于对静态资源进行缓存。</p>
<p>接下来，我们配置了处理 favicon.ico 的位置，并将其路径指定为我们应用程序所在的目录。随后，我们使用 location &#x2F; 指令来处理所有其他请求。使用 proxy_pass 指令，它将请求转发给我们正在运行的 Flask 应用程序，它运行在本地主机（127.0.0.1）的默认端口上（5000）。 proxy_set_header 指令用于将不同的 HTTP 请求头信息传递给 Flask 应用程序。</p>
<p>当您完成了配置文件并将其保存为 &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;myproject 时，需要启用它并将其符号链接到 &#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F;myproject 。你需要执行以下命令启用它：</p>
<p>Copy code<br>sudo ln -s &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;myproject &#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F;<br>如果后面已经添加了链接，就需要先sudo unlink &#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F;myproject将其删除再执行上面的启用链接命令。 然后再执行此命令以重新加载 nginx 配置文件：</p>
<p>Copy code<br>sudo systemctl reload nginx<br>请根据您的实际应用情况配置您的 nginx 配置文件。</p>
<p>Website 直接显示域名</p>
<p>为了在打开您的网站或应用程序时直接显示域名而不是子路径或端口，请使用nginx中的location{}指令将请求重定向至您的 Flask 应用程序。</p>
<p>以下是将请求重定向至 Flask 应用程序的 Nginx 配置文件示例，可以将请求重定向至 Flask 应用程序：</p>
<p>Copy code<br>server {<br>    listen 80;<br>    server_name example.com;</p>
<pre><code>location / &#123;
    return 301 https://example.com$request_uri;
&#125;
</code></pre>
<p>}</p>
<p>server {<br>    listen 443 ssl;<br>    server_name example.com;</p>
<pre><code>ssl_certificate /path/to/your/cert;
ssl_certificate_key /path/to/your/key;

location / &#123;
    proxy_pass http://127.0.0.1:5000;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_redirect off;
&#125;
</code></pre>
<p>}<br>上述 Nginx 配置文件包含两个不同的部分。 第一个部分监听 80 端口上的传入请求，从而具有 server_name 为您的域名。 在这个段中，我们使用location &#x2F; 指令将所有请求重定向到我们的域名return 301 <span class="exturl"><a class="exturl__link"   href="https://example.com$request_uri./" >https://example.com$request_uri。</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 这将生成一个 HTTP 301 永久重定向，并将所有未经请求的请求重定向到我们的应用程序之前的经由该域名的url。通常情况下，我们首选配置服务器在 80 端口上重定向 all （全部）请求到 https 协议的 443 端口上。</p>
<p>第二个部分监听 443 端口上的传入请求，并具有与前面相同的 server_name。 这个部分处理我们的 Flask 应用程序的实际请求，并使用location &#x2F;指令将请求转发给一个运行在本地 5000 端口上的 Flask 应用程序。</p>
<p>请确保在使用 HTTPS 的情况下为服务器配置 SSL&#x2F;TLS 证书。 我们可以通过如certbot之类的工具来获取免费的 SSL&#x2F;TLS 证书，从而保护数据的传输和隐私。</p>
<p>这样做后，您的应用程序将通过<span class="exturl"><a class="exturl__link"   href="http://example.com/" >http://example.com</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 和<span class="exturl"><a class="exturl__link"   href="https://example.com/" >https://example.com</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 表示，而不用在 URL 中显示端口号和子路径。如果你发现你的应用程序还显示端口号和子路径，可以尝试清空浏览器缓存，或者你还可以在页面中使用重定向。</p>
<p>补充知识：</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">Linux创建flask项目</span><br><span class="line"></span><br><span class="line">linux创建flask工程</span><br><span class="line">#创建虚拟目录</span><br><span class="line">mkdir testnav</span><br><span class="line">cd testnav/</span><br><span class="line">python3 -m venv venv</span><br><span class="line">source venv/bin/activate</span><br><span class="line">pip3 install flask</span><br><span class="line"></span><br><span class="line">#自动到处安装包</span><br><span class="line">pip3 freeze &gt; requirements.txt</span><br><span class="line">vim app.py </span><br><span class="line">flask app.py </span><br><span class="line">pip3 install flask_sqlalchemy</span><br><span class="line">pip3 install flask_wtf</span><br><span class="line">pip3 install wtforms.fields.html5</span><br><span class="line">pip install WTForms==2.3.3</span><br><span class="line">#运行</span><br><span class="line">flask run</span><br><span class="line">flask run --host=192.168.1.1</span><br><span class="line"></span><br><span class="line">flask的orm框架(SQLAlchemy)-创建表</span><br><span class="line">手动建表</span><br><span class="line"></span><br><span class="line">、</span><br><span class="line">id`    INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,</span><br><span class="line">    `username`    TEXT NOT NULL UNIQUE,</span><br><span class="line">    `password_hash`    TEXT NOT NULL</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">insert into user username &quot;tom&quot;;</span><br><span class="line"></span><br><span class="line">INSERT INTO USER (username,password_hash) VALUES (&#x27;tom&#x27;,&#x27;sadfadfasdfasfd&#x27;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>



<p>找不到table的时候 直接这样处理，会在instance里面生成库和表<br>(venv) [root@localhost nav]# flask shell<br>Python 3.8.1 (default, Feb  2 2023, 17:05:53)<br>[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)] on linux<br>App: app<br>Instance: &#x2F;opt&#x2F;nav&#x2F;instance</p>
<blockquote>
<blockquote>
<blockquote>
<p>from app import db<br>db.create_all()</p>
</blockquote>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>import os<br>os.urandom(10)<br>b’\xc9NHrx0exb4\xce\x9c?”‘</p>
</blockquote>
</blockquote>
</blockquote>
<p>问：sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: link  falsk 不能自动创建这个表<br>答：<code>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: link</code> 表示你正在查询或更新一个名为 <code>link</code> 的表，但该表不存在。这个错误通常是在表还没有被创建的情况下发生的。根据错误信息，我们可以看到这个问题发生在 SQLite 数据库中，而 Flask 框架不能自动创建这个表，所以你需要手动创建这个表。</p>
<p>你可以通过以下几个步骤来手动创建表：</p>
<ol>
<li><p>在你的应用程序中打开 Python 控制台或者一个新的 Python 文件。</p>
</li>
<li><p>导入数据库，例如：<code>from your_app import db</code>。</p>
</li>
<li><p>在 Python 交互式环境中运行 <code>db.create_all()</code> 命令。这将会根据你在应用程序中定义的数据库模型自动创建相应的表。</p>
</li>
</ol>
<figure class="highlight python"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 示例代码，假设你的链接模型为以下类：</span></span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="string">&#x27;sqlite:///navigation.db&#x27;</span></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Link</span>(db.Model):</span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">50</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    url = db.Column(db.String(<span class="number">200</span>), nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建所有表</span></span><br><span class="line">db.create_all()</span><br></pre></td></tr></table></div></figure>

<p>在上述示例代码中，我们首先为 Flask 应用程序定义了一个链接模型 <code>Link</code>，然后把该模型实例化到 <code>db</code> 实例中。最后，我们调用了 <code>create_all()</code> 方法来创建所有表，包括 <code>Link</code> 表。</p>
<p>如果你希望定制表的创建方式，可以查看 Flask SQLAlchemy 文档中的关于模型定义和迁移的内容，以了解如何手动创建和迁移表。</p>
]]></content>
  </entry>
  <entry>
    <title>flask制作网站导航</title>
    <url>/2023/03/07/flask%E5%88%B6%E4%BD%9C%E7%BD%91%E7%AB%99%E5%AF%BC%E8%88%AA/</url>
    <content><![CDATA[<p>flask开发一个网站导航<br>一个简单的Flask实现的网站导航的示例代码。它的实现依赖于SQLite数据库和Jinja2模板引擎。</p>
<figure class="highlight python"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, redirect, url_for</span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建SQLite数据库并写入数据</span></span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;links.db&#x27;</span>)</span><br><span class="line">c = conn.cursor()</span><br><span class="line">c.execute(<span class="string">&#x27;&#x27;&#x27;CREATE TABLE links (name text, url text)&#x27;&#x27;&#x27;</span>)</span><br><span class="line">c.execute(<span class="string">&quot;INSERT INTO links VALUES (&#x27;Google&#x27;, &#x27;https://www.google.com&#x27;)&quot;</span>)</span><br><span class="line">c.execute(<span class="string">&quot;INSERT INTO links VALUES (&#x27;Facebook&#x27;, &#x27;https://www.facebook.com&#x27;)&quot;</span>)</span><br><span class="line">c.execute(<span class="string">&quot;INSERT INTO links VALUES (&#x27;Twitter&#x27;, &#x27;https://www.twitter.com&#x27;)&quot;</span>)</span><br><span class="line">conn.commit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示导航网站</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    conn = sqlite3.connect(<span class="string">&#x27;links.db&#x27;</span>)</span><br><span class="line">    c = conn.cursor()</span><br><span class="line">    c.execute(<span class="string">&quot;SELECT * FROM links&quot;</span>)</span><br><span class="line">    links = c.fetchall()</span><br><span class="line">    conn.close()</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, links=links)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加新的网站到导航列表</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/add&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>():</span><br><span class="line">    name = request.form[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">    url = request.form[<span class="string">&#x27;url&#x27;</span>]</span><br><span class="line">    conn = sqlite3.connect(<span class="string">&#x27;links.db&#x27;</span>)</span><br><span class="line">    c = conn.cursor()</span><br><span class="line">    c.execute(<span class="string">&quot;INSERT INTO links VALUES (?, ?)&quot;</span>, (name, url))</span><br><span class="line">    conn.commit()</span><br><span class="line">    conn.close()</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></div></figure>

<p>在这个示例中，我们首先导入Flask、render_template、request、redirect和url_for等模块，以及sqlite3库。然后我们创建了一个SQLite数据库并插入了一些初始数据。我们定义了一个名为<code>index</code>的路由，用于显示导航网站，返回一个带有所有链接的HTML页面。我们定义了一个名为<code>add</code>的路由，它允许用户添加新链接到导航列表中，当用户提交表单时，链接会被保存到数据库并重定向到<code>/</code>根路由。</p>
<p>在HTML模板文件中，我们使用了Jinja2模板引擎，使用了for循环遍历链接列表来生成HTML代码。使用Python内置的SQLite数据库还可以进一步优化，这方便你可以高效地存储数据，并快速地查询和过滤数据。</p>
<p>除了添加CSS样式表和JavaScript代码，还可以使用前端框架或组件库来简化前端的开发和美化，这里给出一个使用Bootstrap框架的示例代码：</p>
<figure class="highlight html"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Required meta tags --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Bootstrap CSS --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/css/bootstrap.min.css&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">integrity</span>=<span class="string">&quot;sha384-KyZr5B0i5r5jTKI5ihonx+d6GVEYMEiQ0CioK9XWfsaS/G1lF2nJcPiwAvlbh/4K&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Website Navigation<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;text-center mb-5&quot;</span>&gt;</span>Website Navigation<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-12&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span><br><span class="line">                &#123;% for link in links %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot; &quot;</span> <span class="attr">class</span>=<span class="string">&quot;text-decoration-none fs-5&quot;</span>&gt;</span>&#123;&#123; link[0] &#125;&#125;&lt;/a &gt;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span> <span class="attr">class</span>=<span class="string">&quot;my-5&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-12&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;mb-4&quot;</span>&gt;</span>Add a new website:<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">action</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;add&#x27;) &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group mb-3&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>Name:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group mb-3&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;url&quot;</span>&gt;</span>URL:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;url&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;url&quot;</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary btn-lg&quot;</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Optional JavaScript --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- jQuery first, then Popper.js, then Bootstrap JS --&gt;</span>\</span><br></pre></td></tr></table></div></figure>

<p>图示</p>
<p><img src="https://raw.githubusercontent.com/orangefei/imgbed/master/1678182837796.jpg"></p>
]]></content>
  </entry>
  <entry>
    <title>flask基础</title>
    <url>/2023/03/06/flask%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">初始Flask</span><br><span class="line">使用pycharm(相关安装配置可查看以前的博文)新建flask项目</span><br><span class="line"></span><br><span class="line">解释一下项目的整体结构，从上图可以看到，新建的最基本的项目会包含static和tamplate两个文件夹和一个与包同名的py文件</span><br><span class="line">    static通常存储静态文件，css\js等</span><br><span class="line">    template默认存放模板，什么是模板？这部分详见Flask模板部分</span><br><span class="line">我们知道在MVC框架中包含三个部分：Model、View、Controller</span><br><span class="line">严格地说，Flask不是MVC架构的框架，因为他没有内置数据模型的支持。</span><br><span class="line">其他模块了解：</span><br><span class="line">MVC</span><br><span class="line">    模型（Model）：数据保存</span><br><span class="line">    视图（View）：用户界面。</span><br><span class="line">    控制器（Controller）：业务逻辑</span><br><span class="line">通信流程：</span><br><span class="line">    用户通过UI界面的交互触发View响应，View发送指令给Controller</span><br><span class="line">    Controller完成业务逻辑之后，要求Model更新数据</span><br><span class="line">    Model将新数据发送给View，要求View更新，更新后用户得到反馈</span><br><span class="line"></span><br><span class="line">mvvc</span><br><span class="line">传统的前端会将数据手动渲染到页面上，MVVM模式不需要用户手动操作DOM元素，将数据绑定到viewModel层上，会自动将数据渲染到页面中。</span><br><span class="line">视图变化会通知viewModel层更新数据，viewModel就是MVVM模式的桥梁。</span><br><span class="line">数据驱动数据流动时双向的，model——&gt;viewModel&lt;——&gt;view</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">代码层：</span><br><span class="line">    from flask import Flask</span><br><span class="line">    app = Flask(__name__)</span><br><span class="line">     </span><br><span class="line">    @app.route(&#x27;/&#x27;)</span><br><span class="line">    def hello_world():</span><br><span class="line">        return &#x27;Hello World!&#x27;</span><br><span class="line">     </span><br><span class="line">    if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">        app.run()</span><br><span class="line"></span><br><span class="line">简单解释一下这个示例代码：</span><br><span class="line">传入Flask类构造方法的第一个参数是模块或者包的名称，此处用了当前模块__name__</span><br><span class="line">为函数附加app.route()装饰器，并传入URL规则作为参数，必须以‘/‘开始，可以绑定多个URL也可以是动态&lt;&gt;的，这样URL就和函数建立了关联，这个过程就是注册路由，这个函数被称为视图函数</span><br><span class="line">通过run()方法启动Flask程序，这里有一个调试模式，就是服务器会在代码修改以后自动重新载入，这样就不需要每次修改程序以后手动地去重启它。主要有如下两种方式(绝对不可以用于生产环境)</span><br><span class="line">    方式一：直接在应用对象上设置</span><br><span class="line">        app.debug = True</span><br><span class="line">        app.run()</span><br><span class="line">    方式二：作为run方法的一个参数传入</span><br><span class="line">    app.run(debug=True)</span><br><span class="line"></span><br><span class="line">python里面__(双下划线)和_(单下划线)的区别</span><br><span class="line">拓展一</span><br><span class="line">_单下划线本身可以用作临时变量，比如：for _ in rang(n)；</span><br><span class="line">_xx(变量前的单下划线)，用于声明私有化属性和方法，但实际上python本身没有真正的私有方法，所以这只是一个申明。form 包名 import * 禁止导入，</span><br><span class="line">类对象和子类可以访问，使用对象._变量名调用；</span><br><span class="line"></span><br><span class="line">__xx(变量前的双下划线)，避免与子类中的属性命名冲突，同时双下划线开头的方法不能被重写，只允许类内部使用，无法在外部直接访问，应使用对象._类名__变量名调用；</span><br><span class="line"></span><br><span class="line">__xx__(变量前后的双下划线)，用于定义类的魔法属性/方法，例如：__init__()当变量被创建初始化调用,__new__()用来创建实例、__str__等，无法直接调用；</span><br><span class="line"></span><br><span class="line">Flask与HTTP</span><br><span class="line">Flask模板</span><br><span class="line">基本用法</span><br><span class="line">模板：包含固定内容和动态部分的可重用文件。</span><br><span class="line">模板引擎的作用：读取并执行模板中的特殊语法标记，并根据传入的数据将变量替换为实际值，输出到最终的HTML页面。这个过程也被称为渲染。</span><br><span class="line">Flask默认的模板引擎是Jinja2（支持&quot;.&quot;获取变量的属性），常见的三种定界符：</span><br><span class="line">    语句。如if判断、for循环等：&#123;% ... %&#125;。注意：语句结束时，需要添加结束标签</span><br><span class="line">    表达式。如字符串、变量、函数调用等：&#123;&#123; ... &#125;&#125;</span><br><span class="line">    注释。&#123;# ... #&#125;</span><br><span class="line"></span><br><span class="line"> 这里给出一个简单的示例watchlist.html。其中user是自建的虚拟数据</span><br><span class="line">    user=&#123;</span><br><span class="line">        &#x27;username&#x27;:&#x27;Grey Li&#x27;,</span><br><span class="line">        &#x27;bio&#x27;:&#x27;A boy who loves movies and music&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &lt;!DOCTYPE html&gt;</span><br><span class="line">    &lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&#123;&#123; user.username &#125;&#125;&#x27;s Watchlist&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; user.username &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &#123;% if user.bio %&#125;</span><br><span class="line">        &lt;i&gt;&#123;&#123; user.bio &#125;&#125;&lt;/i&gt;</span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">        &lt;i&gt;This user has not provided a bio.&lt;/i&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    &#123;# 下面是电影清单 #&#125;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">    &lt;/html&gt;</span><br><span class="line"></span><br><span class="line">在视图中渲染模板时，使用render_template()函数，传入模板的文件名作为参数，还可以将关键字参数的形式传入模板中实用的变量值。</span><br><span class="line">当然Jinja2还可以传入字符串、列表、字典；函数、类、类实例</span><br><span class="line">Flask会默认在根目录下的template文件夹下寻找模板文件</span><br><span class="line">教程里面提到：如果应用是一个模板，这个文件夹应该和模板同级；如果是一个包，那么这个文件夹作为包的子目录。</span><br><span class="line">对之前的初始代码进行修改丰富</span><br><span class="line">    from flask import Flask, render_template</span><br><span class="line">     </span><br><span class="line">    app = Flask(__name__)</span><br><span class="line">     </span><br><span class="line">    user = &#123;</span><br><span class="line">        &#x27;username&#x27;:&#x27;Grey Li&#x27;,</span><br><span class="line">        &#x27;bio&#x27;:&#x27;A boy who loves movies and music&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    @app.route(&#x27;/&#x27;)</span><br><span class="line">    def hello_world():</span><br><span class="line">        return &#x27;Hello World!&#x27;</span><br><span class="line">     </span><br><span class="line">    @app.route(&#x27;/watchlist/&#x27;)</span><br><span class="line">    def watchlist():</span><br><span class="line">        return render_template(&quot;watchlist.html&quot;, user=user)</span><br><span class="line">     </span><br><span class="line">    if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">        app.run()</span><br><span class="line"></span><br><span class="line">运行以后，前台显示如下</span><br><span class="line">辅助工具之上下文</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">辅助工具之全局对象</span><br><span class="line">Jinja2提供的内置全局变量</span><br><span class="line">    range([start,]stop[,step])，同python中range的用法</span><br><span class="line">    lipsum(n=5, html=True,min=20,max=100，生成随机文本，可用于测试填充页面</span><br><span class="line">    dict(**items)，同python中字典的用法</span><br><span class="line">Flask内置的全局变量</span><br><span class="line">    url_for()，生成URL的函数</span><br><span class="line">        &lt;a href=&quot;&#123;&#123; url_for(&#x27;index&#x27;) &#125;&#125;&quot;&gt;&amp;larr; Return&lt;/a&gt;</span><br><span class="line">        &#123;#在watchlist.html模板文件中，上面那句话可以等价于下面这句话 #&#125;</span><br><span class="line">        &lt;a href=&quot;/&quot;&gt;&amp;larr; Return&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">    get_flashes_messages()，获取flsh消息的函数。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  <entry>
    <title>flask开发webssh</title>
    <url>/2023/03/06/flask%E5%BC%80%E5%8F%91webssh/</url>
    <content><![CDATA[<figure class="highlight python"><div class="table-container"><table><tr><td class="code"><pre><span class="line">Flask是一种基于Python的轻量级Web框架，它可以用于构建中小型应用程序。WebSSH是一种使用Web浏览器访问SSH远程主机的Web应用程序，并提供了一个适用于终端的Web界面。当这两种技术结合在一起时，就可以开发一个WebSSH应用程序，它可以让用户使用Web浏览器访问SSH远程主机，并提供了一个适用于终端的Web界面。</span><br><span class="line"></span><br><span class="line">下面是一些实现WebSSH的基本思路和步骤：</span><br><span class="line"><span class="number">1.</span> 使用Flask构建Web应用程序，并在其中添加一个SSH终端界面。</span><br><span class="line"><span class="number">2.</span> 使用Python的paramiko库建立与SSH服务器的连接，并在Flask应用程序中调用它。</span><br><span class="line"><span class="number">3.</span> 使用JavaScript编写终端界面的前端代码，以便与Flask应用程序通信，并使用WebSockets实现实时数据传输。</span><br><span class="line"><span class="number">4.</span> 将Flask应用程序部署到云服务器上，并确保在云服务器上安装了必要的软件和依赖项。</span><br><span class="line"><span class="number">5.</span> 配置Flask应用程序的路由和端口，以便用户可以通过Web浏览器访问SSH终端界面。</span><br><span class="line"><span class="number">6.</span> 在用户身份验证方面，可以使用基本认证、OAuth2<span class="number">.0</span>等机制来保护用户的安全，防止随意访问。</span><br><span class="line"><span class="number">7.</span> 配置Flask应用程序的日志记录和监控，以便及时发现和排除异常和错误。</span><br><span class="line"><span class="number">8.</span> 根据具体需求和场景，可以添加一些自定义的功能和扩展，如数据加密、数据备份、会话管理等。</span><br><span class="line">以上就是基于Flask实现WebSSH的一些基本思路和步骤。需要注意的是，由于SSH是一种比较敏感的网络协议，因此在使用过程中需要格外注意安全性和保密性，以确保用户数据和系统安全。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<figure class="highlight python"><div class="table-container"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 安装必要的库</span><br><span class="line"></span><br><span class="line">​```</span><br><span class="line">pip install flask paramiko eventlet</span><br><span class="line">​```</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 导入所需的库</span><br><span class="line"></span><br><span class="line">​```python</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line"><span class="keyword">from</span> flask_socketio <span class="keyword">import</span> SocketIO, send, emit</span><br><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"><span class="keyword">import</span> eventlet</span><br><span class="line">​```</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 定义Flask应用程序</span><br><span class="line"></span><br><span class="line">​```python</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="string">&#x27;secret!&#x27;</span> <span class="comment"># 配置应用程序密钥，用于加密 cookies</span></span><br><span class="line">socketio = SocketIO(app) <span class="comment"># 初始化 SocketIO 实例</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>) </span><span class="comment"># 定义根路由</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>) <span class="comment"># 返回 index.html 模板</span></span><br><span class="line">​```</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 编写连接 SSH 主机并打开会话的函数</span><br><span class="line"></span><br><span class="line">​```python</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">open_ssh_session</span>(<span class="params">hostname, username, password</span>):</span><br><span class="line">    ssh = paramiko.SSHClient()</span><br><span class="line">    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line">    ssh.connect(hostname, username=username, password=password)</span><br><span class="line">    channel = ssh.invoke_shell()</span><br><span class="line">    <span class="keyword">return</span> channel, ssh</span><br><span class="line">​```</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> 在连接成功后，启动一个异步任务接收来自 SSH 主机的消息，并将它们发送到客户端</span><br><span class="line"></span><br><span class="line">​```python</span><br><span class="line"><span class="meta">@socketio.on(<span class="params"><span class="string">&#x27;connect&#x27;</span></span>) </span><span class="comment"># 监听 socket 连接事件</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_connect</span>():</span><br><span class="line">    hostname = <span class="string">&#x27;&lt;your_hostname_here&gt;&#x27;</span></span><br><span class="line">    username = <span class="string">&#x27;&lt;your_username_here&gt;&#x27;</span></span><br><span class="line">    password = <span class="string">&#x27;&lt;your_password_here&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">    channel, ssh = open_ssh_session(hostname, username, password) <span class="comment"># 连接 SSH 主机并打开终端</span></span><br><span class="line">    fd = channel.fileno() <span class="comment"># 获取终端描述符</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将当前任务挂起，等待来自 SSH 主机的数据</span></span><br><span class="line">    <span class="comment"># 一旦有数据到达，将其发送到客户端</span></span><br><span class="line">    <span class="comment"># 这样我们就可以通过指令直接与 SSH 主机进行交互，实现了远程 SSH 连接的功能</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> channel.closed:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 如果终端有数据，立即发送到客户端</span></span><br><span class="line">            <span class="keyword">if</span> channel.recv_ready():</span><br><span class="line">                socketio.emit(<span class="string">&#x27;output&#x27;</span>, channel.recv(<span class="number">1024</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">            eventlet.sleep(<span class="number">0.1</span>) <span class="comment"># 等待下一条消息</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 终止 SSH 会话</span></span><br><span class="line">    channel.close()</span><br><span class="line">    ssh.close()</span><br><span class="line">​```</span><br><span class="line"></span><br><span class="line"><span class="number">6.</span> 编写前端模板</span><br><span class="line"></span><br><span class="line">​```html</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;WebSSH&lt;/title&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;WebSSH Client&lt;/h1&gt;</span><br><span class="line">    &lt;div <span class="built_in">id</span>=<span class="string">&quot;output&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;form <span class="built_in">id</span>=<span class="string">&quot;command-form&quot;</span>&gt;</span><br><span class="line">      &lt;<span class="built_in">input</span> <span class="built_in">id</span>=<span class="string">&quot;input&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> size=<span class="string">&quot;50&quot;</span>/&gt;</span><br><span class="line">      &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;Send&quot;</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script src=<span class="string">&quot;//code.jquery.com/jquery-1.11.1.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;//cdnjs.cloudflare.com/ajax/libs/socket.io/3.0.3/socket.io.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      // 建立 socket 连接</span><br><span class="line">      var socket = io.connect(<span class="string">&#x27;http://&#x27;</span> + document.domain + <span class="string">&#x27;:&#x27;</span> + location.port);</span><br><span class="line"></span><br><span class="line">      // 当 socket 连接成功时，触发回调函数</span><br><span class="line">      socket.on(<span class="string">&#x27;connect&#x27;</span>, function() &#123;</span><br><span class="line">        console.log(<span class="string">&#x27;Socket connected&#x27;</span>);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      // 接收后端发送来的终端输出，并将其显示在网页上</span><br><span class="line">      socket.on(<span class="string">&#x27;output&#x27;</span>, function(msg) &#123;</span><br><span class="line">        $(<span class="string">&#x27;#output&#x27;</span>).append(msg.replace(/</span><br><span class="line">/g, <span class="string">&#x27;&lt;br&gt;&#x27;</span>));</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      // 当用户单击表单提交按钮时，将输入的指令发送给后端处理</span><br><span class="line">      $(<span class="string">&#x27;form#command-form&#x27;</span>).submit(function(event) &#123;</span><br><span class="line">        event.preventDefault();</span><br><span class="line">        var command = $(<span class="string">&#x27;#input&#x27;</span>).val();</span><br><span class="line">        socket.emit(<span class="string">&#x27;command&#x27;</span>, command);</span><br><span class="line">        $(<span class="string">&#x27;#input&#x27;</span>).val(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">​```</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span> 运行应用程序</span><br><span class="line"></span><br><span class="line">​```</span><br><span class="line">python3 app.py</span><br><span class="line">​```</span><br><span class="line"></span><br><span class="line"><span class="number">8.</span> 打开浏览器，访问 http://localhost:<span class="number">5000</span>，即可看到 WebSSH 终端界面。</span><br><span class="line">注意：上述代码仅供参考，实际上线时需要考虑更多的安全性测试和实现细节问题。</span><br><span class="line"></span><br><span class="line">排错</span><br><span class="line">ModuleNotFoundError: No module named <span class="string">&#x27;flask_socketio&#x27;</span></span><br><span class="line">这个错误提示表明您的Python环境中缺少了`flask_socketio`模块。您需要先安装该模块：</span><br><span class="line"></span><br><span class="line">​```</span><br><span class="line">pip install flask-socketio</span><br><span class="line">​```</span><br><span class="line"></span><br><span class="line">如果您使用的是Python3，则可以使用下面的命令安装：</span><br><span class="line"></span><br><span class="line">​```</span><br><span class="line">pip3 install flask-socketio</span><br><span class="line">​```</span><br><span class="line"></span><br><span class="line">安装完成后，再次运行您的Flask应用程序即可。</span><br><span class="line"></span><br><span class="line">AssertionError: View function mapping <span class="keyword">is</span> overwriting an existing endpoint function: index</span><br><span class="line">答：这个错误提示表明您在Flask应用程序中定义了重复的视图函数，即出现了同名的视图函数。出现这种情况会导致Flask无法正常解析请求路由，从而抛出上述的`AssertionError`异常。</span><br><span class="line"></span><br><span class="line">解决方法是修改您的视图函数名称，确保每个视图函数名称都是唯一的。</span><br><span class="line"></span><br><span class="line">例如，如果当前定义了两个名为`index`的视图函数，您可以将其中一个视图函数的名称修改为其他名称，例如`home`，如下所示：</span><br><span class="line"></span><br><span class="line">​```python</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/home&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;This is your home page!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;This is your index page!&#x27;</span></span><br><span class="line">​```</span><br><span class="line"></span><br><span class="line">这样就可以避免同名视图函数的冲突，从而解决上述的`AssertionError`异常。</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

]]></content>
      <tags>
        <tag>flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/02/26/hello-world/</url>
    <content><![CDATA[<p>Welcome to <span class="exturl"><a class="exturl__link"   href="https://hexo.io/" >Hexo</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>! This is your very first post. Check <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/" >documentation</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> for more info. If you get any problems when using Hexo, you can find the answer in <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> or you can ask me on <span class="exturl"><a class="exturl__link"   href="https://github.com/hexojs/hexo/issues" >GitHub</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>.</p>

        <h2 id="Quick-Start"   >
          <a href="#Quick-Start" class="heading-link"><i class="fas fa-link"></i></a><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2>
      
        <h3 id="Create-a-new-post"   >
          <a href="#Create-a-new-post" class="heading-link"><i class="fas fa-link"></i></a><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3>
      <figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></div></figure>

<p>More info: <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/writing.html" >Writing</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h3 id="Run-server"   >
          <a href="#Run-server" class="heading-link"><i class="fas fa-link"></i></a><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3>
      <figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></div></figure>

<p>More info: <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/server.html" >Server</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h3 id="Generate-static-files"   >
          <a href="#Generate-static-files" class="heading-link"><i class="fas fa-link"></i></a><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3>
      <figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></div></figure>

<p>More info: <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/generating.html" >Generating</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h3 id="Deploy-to-remote-sites"   >
          <a href="#Deploy-to-remote-sites" class="heading-link"><i class="fas fa-link"></i></a><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3>
      <figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></div></figure>

<p>More info: <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
]]></content>
  </entry>
  <entry>
    <title>hexo个人博客搭建二</title>
    <url>/2023/02/27/hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%BA%8C/</url>
    <content><![CDATA[<figure class="highlight python"><div class="table-container"><table><tr><td class="code"><pre><span class="line">个人快速建站的几种方法：</span><br><span class="line">一、</span><br><span class="line">hexo+gitee/github</span><br><span class="line">本博客采用GitHub，另外申请的付费域名</span><br><span class="line">https://www.namesilo.com</span><br><span class="line">申请之后，删除多余部分只留a记录和cname记录</span><br><span class="line"></span><br><span class="line">二、生成好的pbulic目录传到oss,配置一个备案成功的域名即可访问，也算低成本的考虑方案</span><br><span class="line">hexo+oss 本地备案</span><br><span class="line">三、</span><br><span class="line">购买搬瓦工之类的vps,部署系统+node环境，申请对应的域名</span><br><span class="line">hexo+vps+namesilo</span><br><span class="line">四、参考以下站点，操作</span><br><span class="line">https://www.cnblogs.com/martin-<span class="number">1</span>/p/<span class="number">14934029.</span>html</span><br><span class="line">https://zhuanlan.zhihu.com/p/<span class="number">582629584</span></span><br><span class="line">https://zhuanlan.zhihu.com/p/<span class="number">350760097</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">五、遇到问题</span><br><span class="line">每次配置 custom domain 之后，再次 hexo deploy 之后，custom domain 会被重置失效。</span><br><span class="line">解决方案</span><br><span class="line">在 hexo 生成的博客的 source 目录下新建一个 CNAME 文件，然后在这个文件中填入你的域名，这样就不会每次发布之后，</span><br><span class="line">gitpage 里的 custom domain 都被重置掉啦。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">六、图片导入</span><br><span class="line">本地配置导入typora</span><br><span class="line"></span><br><span class="line">采用“图床”概念，项目中通过绝对路径引入图片信息。</span><br><span class="line">可借助阿里云、腾讯云、路过图床、七牛云等构建自定义图床进行引入</span><br><span class="line"></span><br><span class="line">tips: </span><br><span class="line">此博客使用的是GitHub作为图床，使用过程中发现，在typora里面直接贴url可以访问，如果在Python模块里面贴图片是无法访问的</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>



<p>namesilo图示:</p>
<p><img src="https://raw.githubusercontent.com/orangefei/imgbed/master/WechatIMG12870.png"></p>
<p><img src="https://raw.githubusercontent.com/orangefei/imgbed/master/WechatIMG12871.png"></p>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo搭建个人博客系统</title>
    <url>/2023/02/27/hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<figure class="highlight python"><div class="table-container"><table><tr><td class="code"><pre><span class="line">开始安装Hexo</span><br><span class="line"><span class="number">1</span>、安装hexo</span><br><span class="line"></span><br><span class="line">npm install -g hexo-cli</span><br><span class="line">或者</span><br><span class="line">cnpm install -g hexo-cli</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、初始化hexo，新建存储博客的文件夹</span><br><span class="line">hexo init myblog</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、进入文件夹，安装一下npm</span><br><span class="line">cd myblog</span><br><span class="line">npm install</span><br><span class="line"><span class="number">4</span>、启动服务站点</span><br><span class="line">hexo g </span><br><span class="line">hexo server</span><br><span class="line"><span class="number">5</span>、重要文件注释</span><br><span class="line">——config.yml 网站配置信息</span><br><span class="line">package.json 应用程序信息</span><br><span class="line">scaffolds 模板文件夹（存放文章）</span><br><span class="line">source 存放用户资源文件夹</span><br><span class="line">thems 主题文件夹</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Gitee上建站访问</span><br><span class="line">可在github或者gitee上建站，gitee国内访问快一些</span><br><span class="line"><span class="number">1</span>、新建仓库</span><br><span class="line">格式必须是：用户名+.gitee.io 只有这样，将来要部署到Gite e page的时候，才会被识别，</span><br><span class="line">也就是xxxx.gitee.io，其中xxx就是你注册Gitee的用户名。</span><br><span class="line"><span class="number">2</span>、将hexo博客站点上传到gitee上</span><br><span class="line">这里需要安装一个hexo的上传插件deploy-git</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"><span class="number">3</span>、修改hexo配置文件指定仓库路径</span><br><span class="line">可在文件夹中直接打开文件，也可通过vim直接编</span><br><span class="line">找到Deployment加上（注意空格）</span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: 你的仓库路径</span><br><span class="line">  branch: master <span class="comment">#github现在已更改为main</span></span><br><span class="line"><span class="number">4</span>、推送hexo站点文件</span><br><span class="line">之后就可以推送博客站点到gitee上了</span><br><span class="line">推送命令</span><br><span class="line">hexo d</span><br><span class="line">扩展：</span><br><span class="line">其中 hexo clean清除了你之前生成的东西，也可以不加。</span><br><span class="line">hexo generate 顾名思义，生成静态文章，可以用 hexo g缩写</span><br><span class="line">hexo deploy 部署文章，可以用hexo d缩写</span><br><span class="line"></span><br><span class="line">推送中会要求输入gitee的用户名和密码（如果不想每次都输可以配置ssh，我这里就不做演示了）</span><br><span class="line">然后就可以看到gitee上有推上来的文件</span><br><span class="line"><span class="number">5</span>、配置Pages服务</span><br><span class="line">目前我们站点还无法访问需要开启Gitee Pages（gitee需要开启(目前需要四个身份证验证)，github不需要）</span><br><span class="line">审核通过启动我们就可以访问啦。</span><br><span class="line">gitee上传新文件之后，需要手动更新一下，更新后的页面才会生效</span><br><span class="line">标记：如果觉得这个访问路径太长了，我们可以去买一个域名，将该路径绑定到域名上，即可通过域名访问了。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">6</span>、安装插件</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">更换主题 到GitHub上搜索hexo主题或者hero自带的主题https://hexo.io/themes/</span><br><span class="line">创建新的页面</span><br><span class="line">hexo new page about</span><br><span class="line">hexo new page categories</span><br><span class="line">categories:</span><br><span class="line">        - [Linux]</span><br><span class="line">        - [Linux, tools]</span><br><span class="line">        - [Python,web]</span><br><span class="line">        - [Database]</span><br><span class="line"><span class="comment"># 多级分类写法</span></span><br><span class="line"></span><br><span class="line">hexo new page tags</span><br><span class="line">tags:</span><br><span class="line">- jQuery</span><br><span class="line">- 表格</span><br><span class="line">- 表单验证</span><br><span class="line"><span class="comment">#支持这种格式</span></span><br><span class="line"></span><br><span class="line">报错处理</span><br><span class="line">extends ./_layout.pug block content include ./_partials/post/post-<span class="built_in">list</span>.pug <span class="keyword">if</span> theme.post_list.paginate.home include ./_partials/widgets/paginator.pug </span><br><span class="line">npm install hexo-renderer-pug --save</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

]]></content>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>linux基础知识梳理</title>
    <url>/2023/04/23/linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/</url>
    <content><![CDATA[<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">Linux是一种免费、开源的操作系统，它的核心组件包括内核和用户空间程序等。Linux以其高度的可定制性和灵活性而闻名，因此在IT行业中得到了广泛的应用。本文将介绍Linux的基础知识、技术名词和基本命令。</span><br><span class="line"></span><br><span class="line">1. Shell和命令行界面</span><br><span class="line"></span><br><span class="line">Shell是Linux中的命令行界面，是Linux管理的主要方式。常见的Shell包括Bash、Zsh和Fish等。使用Shell可以执行各种系统操作，如文件管理、软件安装和网络设置等。</span><br><span class="line"></span><br><span class="line">常用命令：</span><br><span class="line"></span><br><span class="line">- cd：切换当前的工作目录。</span><br><span class="line">- ls：列出当前目录下的文件和文件夹。</span><br><span class="line">- mkdir：创建一个新的目录。</span><br><span class="line">- rm：删除指定的文件或目录。</span><br><span class="line">- touch：创建一个新的空文件。</span><br><span class="line">- cat：查看文件的内容。</span><br><span class="line"></span><br><span class="line">2. 文件系统</span><br><span class="line"></span><br><span class="line">Linux的文件系统是以树形结构组织的，并按照其类型和用途进行分类。常见的文件系统包括EXT4、NTFS和FAT32等。</span><br><span class="line"></span><br><span class="line">常用命令：</span><br><span class="line"></span><br><span class="line">- pwd：显示当前工作目录的完整路径。</span><br><span class="line">- cd：切换当前工作目录。</span><br><span class="line">- ls：列出当前目录下的所有文件和文件夹。</span><br><span class="line">- mkdir：创建一个新的目录。</span><br><span class="line">- rm：删除指定的文件或目录。</span><br><span class="line">- chmod：更改文件或目录的权限。</span><br><span class="line">- chown：更改文件或目录的所有者。</span><br><span class="line"></span><br><span class="line">3. 权限管理</span><br><span class="line"></span><br><span class="line">在Linux中，每个文件和目录都有一个所有者和一组权限设置。权限包括读、写和执行等操作。管理员可以对文件和目录进行精细的控制，以保证系统安全性。</span><br><span class="line"></span><br><span class="line">常用命令：</span><br><span class="line"></span><br><span class="line">- chmod：更改文件或目录的权限。</span><br><span class="line">- chown：更改文件或目录的所有者。</span><br><span class="line"></span><br><span class="line">4. 软件包管理</span><br><span class="line"></span><br><span class="line">Linux提供了多种软件包管理工具，如yum和apt-get等，它们可以轻松地安装、更新和卸载软件包。软件包是一组相关的程序和文件，通常以.tar.gz或.rpm等压缩格式分发。</span><br><span class="line"></span><br><span class="line">常用命令：</span><br><span class="line"></span><br><span class="line">- apt-get install：安装指定的软件包。</span><br><span class="line">- apt-get update：更新软件包列表。</span><br><span class="line">- apt-get upgrade：升级已安装的软件包。</span><br><span class="line"></span><br><span class="line">5. 网络设置</span><br><span class="line"></span><br><span class="line">Linux具有强大的网络功能，可以轻松地设置本地网络和Internet连接。如果你想将Linux作为Web服务器或数据库服务器使用，对于网络设置的深入了解尤为重要。</span><br><span class="line"></span><br><span class="line">常用命令：</span><br><span class="line"></span><br><span class="line">- ifconfig：显示当前计算机的网络接口信息。</span><br><span class="line">- ping：测试连接到另一台计算机时的响应时间。</span><br><span class="line">- netstat：显示计算机的网络状态信息。</span><br><span class="line">- ssh：使用SSH协议连接到另一台计算机。</span><br><span class="line"></span><br><span class="line">总之，掌握Linux基础知识对于IT从业者来说非常重要。在日常工作中，我们需要使用Shell和命令行界面执行各种系统操作，管理文件系统和权限，安装和升级软件包，以及进行网络设置等。此外，学习Linux还需要耐心和实践，通过在线资源和书籍深入了解和掌握更多的知识点和技巧。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Linux是一种开源的操作系统，具有高度的可定制性和灵活性。它支持多种基础服务搭建，如Web服务器、数据库服务器、邮件服务器等。本文将介绍常用的Linux基础服务搭建，并提供相应的指导。</span><br><span class="line"></span><br><span class="line">1. Web服务器</span><br><span class="line"></span><br><span class="line">在Linux上安装Web服务器是非常常见的。常见的Web服务器软件包括Apache、Nginx和Lighttpd等。这些软件包都可以在Linux上轻松地进行安装和配置。</span><br><span class="line"></span><br><span class="line">常用命令：</span><br><span class="line"></span><br><span class="line">- Apache：sudo apt-get install apache2</span><br><span class="line">- Nginx：sudo apt-get install nginx</span><br><span class="line">- Lighttpd：sudo apt-get install lighttpd</span><br><span class="line"></span><br><span class="line">2. 数据库服务器</span><br><span class="line"></span><br><span class="line">Linux可以很容易地作为数据库服务器来使用。MySQL和PostgreSQL是两个流行的开源数据库服务器软件。安装这些软件之前，请确保已经正确地设置了用户权限和防火墙规则。</span><br><span class="line"></span><br><span class="line">常用命令：</span><br><span class="line"></span><br><span class="line">- MySQL：sudo apt-get install mysql-server</span><br><span class="line">- PostgreSQL：sudo apt-get install postgresql</span><br><span class="line"></span><br><span class="line">3. 邮件服务器</span><br><span class="line"></span><br><span class="line">在Linux上架设邮件服务器也非常容易，您可以选择使用Postfix或Exim等邮件服务器软件。同时，还需要安装Dovecot作为IMAP/POP3服务器，以便用户可以使用标准邮件客户端连接到您的邮件服务器。</span><br><span class="line"></span><br><span class="line">常用命令：</span><br><span class="line"></span><br><span class="line">- Postfix：sudo apt-get install postfix</span><br><span class="line">- Exim：sudo apt-get install exim4</span><br><span class="line">- Dovecot：sudo apt-get install dovecot-imapd dovecot-pop3d</span><br><span class="line"></span><br><span class="line">4. 文件共享服务器</span><br><span class="line"></span><br><span class="line">Linux还可以作为文件共享服务器来使用。Samba是一个流行的开源软件包，可用于在Windows和Linux系统之间共享文件。</span><br><span class="line"></span><br><span class="line">常用命令：</span><br><span class="line"></span><br><span class="line">- Samba：sudo apt-get install samba</span><br><span class="line"></span><br><span class="line">总之，Linux支持多种基础服务搭建，这些服务涵盖了Web服务器、数据库服务器、邮件服务器和文件共享服务器等方面。以上只是其中一些最基本的服务，如果您需要更高级或特定的服务，可以通过自学或请教专业人士来实现。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在Linux系统中，管理员需要熟悉一些常用的系统管理命令，以便有效地管理系统。下面列出一些常用的命令：</span><br><span class="line"></span><br><span class="line">1. ls：列出当前目录下的所有文件和子目录。</span><br><span class="line"></span><br><span class="line">2. cd：切换当前工作目录，可以进入任意一个目录。</span><br><span class="line"></span><br><span class="line">3. mkdir：创建一个新的目录。</span><br><span class="line"></span><br><span class="line">4. rm：删除指定的文件或目录。</span><br><span class="line"></span><br><span class="line">5. mv：移动或重命名文件或目录。</span><br><span class="line"></span><br><span class="line">6. cp：将文件或目录复制到另一个位置。</span><br><span class="line"></span><br><span class="line">7. cat：显示文件内容。</span><br><span class="line"></span><br><span class="line">8. touch：创建一个空文件或更新已有的文件时间戳。</span><br><span class="line"></span><br><span class="line">9. grep：在文件中搜索指定的文本模式。</span><br><span class="line"></span><br><span class="line">10. top：查看当前系统中占用资源最多的进程。</span><br><span class="line"></span><br><span class="line">11. ps：显示当前系统中正在运行的进程。</span><br><span class="line"></span><br><span class="line">12. kill：终止指定进程。</span><br><span class="line"></span><br><span class="line">13. df：查看磁盘使用情况。</span><br><span class="line"></span><br><span class="line">14. du：查看指定目录的磁盘使用情况。</span><br><span class="line"></span><br><span class="line">15. ifconfig：显示网络接口的配置信息。</span><br><span class="line"></span><br><span class="line">16. ping：测试与指定主机的连接性。</span><br><span class="line"></span><br><span class="line">17. ssh：登录远程计算机并执行命令。</span><br><span class="line"></span><br><span class="line">18. scp：将文件从本地计算机复制到远程计算机。</span><br><span class="line"></span><br><span class="line">19. su：以超级用户身份登录。</span><br><span class="line"></span><br><span class="line">20. sudo：以另一个用户身份执行命令，并要求输入管理员密码。</span><br><span class="line"></span><br><span class="line">以上这些命令是Linux系统管理员必须掌握的基本命令。当然，还有很多其他命令和工具可以用来管理Linux系统，如systemctl、journalctl等。熟练地掌握这些命令和工具是保障系统稳定运行的关键。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在Linux操作系统中，iptables是一种非常流行和强大的防火墙工具。它可以让管理员精确控制网络流量，保护系统安全。下面是iptables防火墙的常用用法：</span><br><span class="line"></span><br><span class="line">1. 拒绝所有流量：使用以下命令可以拒绝所有传入和传出的流量：</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>
<p>iptables -P INPUT DROP<br>iptables -P OUTPUT DROP</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2. 允许指定端口的流量：如果您只想允许来自某个特定端口的流量通过防火墙，可以使用以下命令：</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>
<p>iptables -A INPUT -p tcp –dport {port_number} -j ACCEPT<br>iptables -A OUTPUT -p tcp –sport {port_number} -j ACCEPT</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">其中port_number是您要允许的端口号。</span><br><span class="line"></span><br><span class="line">3. 允许特定IP地址或IP地址范围的流量：如果您只想允许特定IP地址或IP地址范围的流量通过防火墙，可以使用以下命令：</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>
<p>iptables -A INPUT -s {ip_address or ip_range} -j ACCEPT<br>iptables -A OUTPUT -d {ip_address or ip_range} -j ACCEPT</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">其中ip_address是您要允许的单个IP地址，ip_range是您要允许的IP地址范围。</span><br><span class="line"></span><br><span class="line">4. 允许已建立的连接的流量：使用以下命令可以允许已建立的连接的流量通过防火墙：</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>
<p>iptables -A INPUT -m state –state ESTABLISHED,RELATED -j ACCEPT<br>iptables -A OUTPUT -m state –state ESTABLISHED,RELATED -j ACCEPT</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">5. 允许ICMP流量：使用以下命令可以允许ICMP流量通过防火墙：</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>
<p>iptables -A INPUT -p icmp -j ACCEPT<br>iptables -A OUTPUT -p icmp -j ACCEPT</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">6. 查看当前的规则列表：使用以下命令可以查看当前的规则列表：</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>
<p>iptables -L</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">上述命令中的-L选项用于列出当前的防火墙规则。</span><br><span class="line"></span><br><span class="line">总之，iptables是一种非常有用的工具，可以帮助管理员确保系统的安全性。熟练掌握这些常用用法可以使您更好地管理和维护Linux系统。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在Linux操作系统中，网络是一项非常重要的功能。对于管理员来说，了解Linux网络知识是必不可少的。下面是对Linux网络知识的梳理：</span><br><span class="line"></span><br><span class="line">1. IP地址：IP地址是Internet协议（IP）网络中的唯一标识符，它用于识别计算机和其他设备。在Linux系统中，可以使用ip命令或ifconfig命令查看和配置IP地址。</span><br><span class="line"></span><br><span class="line">2. 网关：网关是网络中连接不同子网的设备，例如路由器。在Linux系统中，可以使用route命令或ip命令设置默认网关。</span><br><span class="line"></span><br><span class="line">3. DNS：DNS（Domain Name System）是将域名转换为IP地址的系统。在Linux系统中，可以使用/etc/resolv.conf文件配置DNS服务器。</span><br><span class="line"></span><br><span class="line">4. 端口：端口是计算机上运行的进程与外部世界进行通信的机制。在Linux系统中，可以使用netstat命令或lsof命令查看正在使用的端口以及它们的状态。</span><br><span class="line"></span><br><span class="line">5. 防火墙：防火墙是保护计算机免受未经授权访问的安全工具。在Linux系统中，可以使用iptables命令配置防火墙规则。</span><br><span class="line"></span><br><span class="line">6. SSH：SSH（Secure Shell）是一种加密网络协议，用于远程登录到计算机并执行命令。在Linux系统中，可以使用ssh命令建立SSH连接。</span><br><span class="line"></span><br><span class="line">7. HTTP和HTTPS：HTTP（HyperText Transfer Protocol）和HTTPS（HTTP Secure）是用于从Web服务器传输数据的协议。在Linux系统中，可以使用curl或wget命令从Web服务器下载文件。</span><br><span class="line"></span><br><span class="line">8. 路由：路由是将数据包从一个网络发送到另一个网络的过程。在Linux系统中，可以使用route命令或ip命令配置和管理路由。</span><br><span class="line"></span><br><span class="line">9. 子网掩码：子网掩码是用于确定IP地址所属子网的标识符。在Linux系统中，可以使用ip地址和子网掩码计算出所属的子网，并使用ifconfig或ip命令进行配置。</span><br><span class="line"></span><br><span class="line">10. 网络接口：网络接口是计算机通过物理或虚拟方式与网络连接的设备。在Linux系统中，可以使用ifconfig或ip命令查看和配置网络接口。</span><br><span class="line"></span><br><span class="line">总之，了解这些Linux网络知识可以使管理员更好地理解计算机网络，更好地管理和维护Linux系统。</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  <entry>
    <title>nginxupstream</title>
    <url>/2023/03/01/nginxupstream/</url>
    <content><![CDATA[<figure class="highlight python"><div class="table-container"><table><tr><td class="code"><pre><span class="line">nginx负载均衡的三种方式主要是轮询模式、weight权重模式、ip_hash。</span><br><span class="line">当一台服务器的单位时间内的访问量越大时，服务器压力就越大，大到超过自身承受能力时，服务器就会崩溃。为了避免服务器崩溃，让用户有更好的体验，我们通过负载均衡的方式来分担服务器压力。</span><br><span class="line"><span class="number">1</span>、轮询模式（默认） </span><br><span class="line">每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</span><br><span class="line">适合服务器配置相当，无状态且短平快的服务使用。也适用于图片服务器集群和纯静态页面服务器集群。</span><br><span class="line"><span class="number">2</span>、weight权重模式</span><br><span class="line">这种方式比较灵活，当后端服务器性能存在差异的时候，通过配置权重，可以让服务器的性能得到充分发挥，有效利用资源。weight和访问比率成正比，用于后端服务器性能不均的情况。权重越高，在被访问的概率越大</span><br><span class="line"><span class="number">3</span>、ip_hash</span><br><span class="line">上述weight权重模式方式存在一个问题，在负载均衡系统中，假如用户在某台服务器上登录了，那么该用户第二次请求的时候，因为我们是负载均衡系统，每次请求都会重新定位到服务器集群中的某一个，那么已经登录某一个服务器的用户再重新定位到另一个服务器，其登录信息将会丢失，这样显然是不妥的。</span><br><span class="line">可以采用ip_hash指令解决这个问题，如果客户已经访问了某个服务器，当用户再次访问时，会将该请求通过哈希算法，自动定位到该服务器。</span><br><span class="line">每个请求按访问ip的<span class="built_in">hash</span>结果分配，这样每个访客固定访问一个后端服务器，可以解决session不能跨服务器的问题。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Nginx只有当有访问时后，才发起对后端节点探测。如果本次请求中，节点正好出现故障，Nginx依然将请求转交给故障的节点,然后再转交给健康的节点处理。</span><br><span class="line">所以不会影响到这次请求的正常进行。但是会影响效率,因为多了一次转发,而且自带模块无法做到预警。</span><br><span class="line">nginx主动检查</span><br><span class="line">主动地健康检查，nignx定时主动地去ping后端的服务列表，当发现某服务出现异常时，把该服务从健康列表中移除，当发现某服务恢复时，又能够将该服务加回健康列表中。</span><br><span class="line">淘宝有一个开源的实现nginx_upstream_check_module模块</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

]]></content>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础</title>
    <url>/2023/03/07/python%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>Python是一种高级编程语言，具有易于学习、易于编写、可读性强、可扩展性好等特性，被广泛应用于Web应用程序、数据科学、人工智能、自然语言处理、网络编程等领域。在本篇博客中，我们将从以下几个方面介绍Python的特点和应用。</p>
<ol>
<li>语言特性</li>
</ol>
<p>Python的语法简洁，使用缩进代替花括号，使得代码更加清晰易读。它也是一种解释型语言，不需要编译，可以在不同的平台上运行。Python有各种不同的应用场景，包括Web开发、数据科学、人工智能、自然语言处理、网络编程等。在这些领域中，Python都有着广泛的应用。</p>
<ol start="2">
<li>应用场景</li>
</ol>
<p>Python的应用场景主要包括以下几个方面。</p>
<p>2.1 Web开发</p>
<p>通过使用一些Web框架，如Django、Flask等，可以使用Python来开发Web应用程序。这些框架提供了各种工具和功能，使得开发者可以更加高效地构建和调试Web应用程序。</p>
<p>2.2 数据科学</p>
<p>Python在数据科学领域中的应用越来越广泛。NumPy、Pandas、Matplotlib等库提供了各种各样的数据结构和分析工具，使得Python成为了数据分析和可视化的重要工具。</p>
<p>2.3 人工智能</p>
<p>Python也被广泛应用于人工智能领域，特别是深度学习等方面。TensorFlow、PyTorch等库提供了各种各样的神经网络模型和优化算法，使得Python成为了深度学习领域的主流语言。</p>
<p>2.4 自然语言处理</p>
<p>Python也是自然语言处理领域中的重要工具。NLTK、SpaCy等库提供了各种自然语言处理工具和算法，使得开发者可以更加轻松地处理和分析文本数据。</p>
<p>2.5 网络编程</p>
<p>Python也可以用于网络编程，在Socket编程、爬虫等方面有广泛的应用。通过使用一些网络编程库，如Requests、Scrapy等，可以轻松地进行网络通信和数据抓取等工作。</p>
<ol start="3">
<li>优缺点</li>
</ol>
<p>Python的优点主要包括易于学习、易于编写、可读性强、可扩展性好等方面。Python还有丰富的第三方库支持，包括NumPy、Pandas、Matplotlib、TensorFlow等用于数据科学和机器学习的重要库。</p>
<p>Python的缺点主要包括执行速度较慢、无法与C&#x2F;C++这样的编译型语言相比，并且由于其动态类型特性，代码缺乏一定的类型安全性。</p>
<ol start="4">
<li>Python社区与资源</li>
</ol>
<p>Python有着广泛的社区和资源支持，包括Stack Overflow、GitHub等网站上的大量资源和社区，可以帮助Python开发者解决问题。同时，Python社区也推出了各种学习资源和书籍，如《Python基础教程》、《Python核心编程》等，供初学者参考。</p>
<p>总之，Python是一种易于学习且功能强大的编程语言，可以应用于各种领域。对于初学者，Python的学习曲线非常平缓，易于上手。对于专业开发者，Python具有质量高、效率高、可读性强等特点，被广泛认可和应用。</p>
<p>python flask和Django的区别<br>Python Flask和Django是两个流行的web框架，它们都基于Python语言，但在设计思想、功能及适用范围方面有一定的区别。下面是它们的主要区别：</p>
<ol>
<li>设计思想</li>
</ol>
<p>Flask的设计思想是”micro”（微型）和”minimalist”（极简），它只提供了基本的web服务功能，其他的功能需要引入第三方库来实现。相比之下，Django的设计思想是”batteries included”（一揽子服务），它提供了一个完整的解决方案，包括ORM、模板引擎、管理后台等。</p>
<ol start="2">
<li>功能</li>
</ol>
<p>Flask的灵活性非常高，因为它只提供了基本的web服务，其他的功能由开发者自己决定。Flask也是一个轻量级的框架，适合构建小型web应用。相比之下，Django提供了更全面的功能，从ORM到模板引擎，非常适合构建大型复杂的web应用。</p>
<ol start="3">
<li>学习曲线</li>
</ol>
<p>Flask的学习曲线相对较低，因为它非常简单，只需几个文件就可以开始工作了。而Django学习曲线相对更陡峭、复杂，因为它提供了更多的功能和选项。</p>
<ol start="4">
<li>性能</li>
</ol>
<p>Flask通常比Django执行速度更快，因为它非常灵活，只提供了需要的功能，相比之下Django包含了更多的功能和库。但是，这并不意味着Django的执行速度较慢，它仍然是一个高性能的web框架之一。</p>
<p>综上所述，Flask和Django都是优秀的Python web框架。如果你希望构建小型、灵活的web应用并且是Python初学者，那么Flask的学习曲线会更加平缓。但是如果你需要构建大型的、复杂的web应用，并且需要一个完整的解决方案，那么Django可能更适合你。</p>
]]></content>
  </entry>
  <entry>
    <title>title</title>
    <url>/2023/02/26/title/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Linux</category>
        <category>tools</category>
        <category>Python</category>
        <category>web</category>
        <category>Database</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>mysql</tag>
        <tag>python</tag>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>多源复制处理主从不同步</title>
    <url>/2023/04/13/%E5%A4%9A%E6%BA%90%E5%A4%8D%E5%88%B6%E5%A4%84%E7%90%86%E4%B8%BB%E4%BB%8E%E4%B8%8D%E5%90%8C%E6%AD%A5/</url>
    <content><![CDATA[<figure class="highlight python"><div class="table-container"><table><tr><td class="code"><pre><span class="line">将主库全量导入从库后重建主从关系的具体步骤如下:<span class="number">1.</span> 在主库上执行全量备份:</span><br><span class="line">sql</span><br><span class="line">mysqldump -uroot -p --<span class="built_in">all</span>-databases --master-data &gt; full_backup.sql</span><br><span class="line">这会在full_backup.sql文件中备份所有数据库,并在文件开头记录主库当前的binlog位置。<span class="number">2.</span> 在从库停止slave线程:</span><br><span class="line">sql</span><br><span class="line">STOP SLAVE; </span><br><span class="line"><span class="number">3.</span> 在从库删除已有的主库信息:</span><br><span class="line">sql</span><br><span class="line">RESET SLAVE; </span><br><span class="line"><span class="number">4.</span> 将主库的全量备份还原到从库:</span><br><span class="line">sql</span><br><span class="line">mysql -uroot -p &lt; full_backup.sql</span><br><span class="line"><span class="number">5.</span> 获取备份文件中的主库binlog位置:在full_backup.sql的开头查找如下行,记录下File和Position的值:</span><br><span class="line">-- CHANGE MASTER TO MASTER_LOG_FILE=<span class="string">&#x27;mysql-bin.000030&#x27;</span>, MASTER_LOG_POS=<span class="number">3395</span>;  </span><br><span class="line"> <span class="number">6.</span> 在从库配置主库信息并启动复制:</span><br><span class="line">sql</span><br><span class="line">CHANGE MASTER TO  </span><br><span class="line">MASTER_HOST=<span class="string">&#x27;主库IP&#x27;</span>,</span><br><span class="line">MASTER_USER=<span class="string">&#x27;备份账号&#x27;</span>,</span><br><span class="line">MASTER_PASSWORD=<span class="string">&#x27;密码&#x27;</span>,  </span><br><span class="line">MASTER_LOG_FILE=<span class="string">&#x27;binlog文件名&#x27;</span>,  </span><br><span class="line">MASTER_LOG_POS=BINLOG的POSITION;  </span><br><span class="line"></span><br><span class="line">START SLAVE;  </span><br><span class="line"><span class="number">7.</span> 检查从库slave状态,确保Slave_IO_Running和Slave_SQL_Running都为Yes, Seconds_Behind_Master为<span class="number">0</span>,</span><br><span class="line">表示已与主库建立同步。</span><br><span class="line">sql</span><br><span class="line">SHOW SLAVE STATUS\G;</span><br><span class="line"><span class="number">8.</span> 将应用连接指向当前的主库,完成主库与从库的切换。至此,主从关系重建完成,主库全量数据导入从库,并恢复主从复制同步状态。这种彻底重建主从的方式虽然麻烦,但可以快速修复主从数据不同步的问题,使高可用集群重新达到同步状态。</span><br></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  <entry>
    <title>常见的linux基础知识二</title>
    <url>/2023/04/23/%E5%B8%B8%E8%A7%81%E7%9A%84linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%BA%8C/</url>
    <content><![CDATA[<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">Linux web基础架构和常用的web架构</span><br><span class="line">在现代互联网时代，Web应用程序已经成为企业的核心业务之一。因此，构建高效、可靠且安全的Web基础架构是至关重要的。本文将探讨Linux Web基础架构和常用的Web架构。</span><br><span class="line">Linux Web基础架构</span><br><span class="line">Linux Web基础架构通常由以下组件组成：</span><br><span class="line">1. 操作系统：Linux操作系统是Web服务器最常用的操作系统之一，它具有高度的可定制性和灵活性，并且免费获取。</span><br><span class="line">2. Web服务器：Apache、Nginx等是最受欢迎的Web服务器，它们提供了处理HTTP请求的功能，也可以通过模块扩展其他功能，例如SSL证书管理、负载均衡等。</span><br><span class="line">3. 数据库：MySQL、PostgreSQL和MongoDB等是常用的数据库，它们提供数据存储、高级查询和事务管理等功能。</span><br><span class="line">4. 缓存：缓存对于提高Web应用程序的响应速度非常重要。Redis、Memcached等是最流行的缓存解决方案。</span><br><span class="line">5. 应用程序框架：Django、Ruby on Rails、Flask等是最流行的Web应用程序框架，它们可以简化应用程序的开发过程，提供基础功能如路由、表单验证和访问数据库等。</span><br><span class="line">常用的Web架构</span><br><span class="line">1. 单层架构：单层架构是最简单的Web架构，它只包括一个服务器。这种架构适合小型Web应用程序，但缺点是可扩展性差。</span><br><span class="line">2. 两层架构：两层架构在单层架构的基础上增加了一个应用程序服务器层。这种架构可以提高系统的可扩展性和性能。</span><br><span class="line">3. 三层架构：三层架构由Web服务器、应用程序服务器和数据库服务器组成。这种架构可以更好地隔离不同的功能模块，并提供更好的可扩展性和稳定性。</span><br><span class="line">4. 微服务架构：微服务架构是一种复杂的架构，将应用程序分解为多个小型服务，每个服务都独立部署在容器中。这种架构可以提供更高的灵活性、可伸缩性和可维护性。</span><br><span class="line">总结</span><br><span class="line">构建高效、可靠且安全的Web基础架构是企业成功的关键之一。Linux Web基础架构和常用的Web架构提供了许多工具和技术来实现这一目标。选择适合您企业需求的架构并使用正确的工具和技术，可以帮助您构建高效、可靠和安全的Web基础架构。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">常用的消息队列包括Kafka、RabbitMQ、ActiveMQ和Redis等。以下是它们的对比：</span><br><span class="line">1. Kafka：Kafka 是一个高吞吐量，分布式的消息系统，特别适合处理大数据流。它可以存储、订阅和发布消息，并支持批量数据处理、多租户和数据复制等功能。Kafka有良好的可扩展性和容错性，被广泛应用于日志收集、实时数据处理等领域。</span><br><span class="line">2. RabbitMQ：RabbitMQ 是一个开源的AMQP（高级消息队列协议）实现，可靠而稳定。它支持先入先出（FIFO）和发布/订阅模型，并支持消息确认、重试和死信队列等特性。RabbitMQ还提供了插件机制来扩展其功能。</span><br><span class="line">3. ActiveMQ：ActiveMQ是一个基于JMS（Java消息服务）规范的开源消息中间件，它支持多种通信协议，如AMQP、STOMP和OpenWire等。它还支持消息持久化、事务和安全认证等功能，是企业级应用程序的首选。</span><br><span class="line">4. Redis：Redis 是一个支持多种数据结构的内存键值数据库，但同时也可以作为消息中间件使用。Redis提供了发布/订阅模型和阻塞队列功能，以及持久化和主从复制等特性。Redis的性能非常优秀，适合处理高频率、低延迟的消息。</span><br><span class="line">综上所述，每个消息队列都有其独特的优点和局限性，选择合适的消息队列取决于您的应用程序需求和使用场景。</span><br><span class="line"></span><br><span class="line">以下是代码管理和流程管理的一些示例：</span><br><span class="line">1. 版本控制工具：常见的版本控制工具包括Git、SVN等，它们可以帮助开发者对代码进行版本管理，合并分支，协同开发等。</span><br><span class="line">2. 自动化构建工具：自动化构建工具如Maven、Gradle等，可以帮助开发者自动执行构建任务，生成可执行文件，进行单元测试等。</span><br><span class="line">3. 持续集成及持续交付工具：持续集成和持续交付工具如Jenkins、Travis CI等，可以帮助开发者自动构建、测试、打包和部署软件，并提供实时反馈和错误报告。</span><br><span class="line">4. 代码审查工具：代码审查工具如Checkstyle、SonarQube等，可以帮助开发者检测代码质量问题，提高代码可读性和可维护性。</span><br><span class="line">5. 缺陷管理工具：缺陷管理工具如JIRA、Bugzilla等，可以帮助开发者跟踪和解决缺陷，协调测试人员和开发人员之间的沟通。</span><br><span class="line">6. 敏捷开发工具：敏捷开发工具如Trello、Asana等，可以帮助团队进行任务管理，追踪进度和优化团队协作。</span><br><span class="line">7. 文档管理工具：文档管理工具如Confluence、Wiki等，可以帮助开发者和团队进行文档协作和知识共享。</span><br><span class="line">这些工具和流程可以帮助开发者更加高效地进行代码管理和流程管理，提高软件生产效率和质量。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">以下是几个常见的开源分布式配置管理工具，它们各有特点和优缺点：</span><br><span class="line"></span><br><span class="line">1. Spring Cloud Config：Spring Cloud Config是一种基于Git或SVN仓库的配置中心实现，支持多种语言和易于集成，同时具有版本控制、热更新和高可用性等特点。缺点是相对简单，不支持Zookeeper等共享存储后端。</span><br><span class="line">2. ZooKeeper：ZooKeeper是一个分布式协调服务，可以作为配置管理中心使用，提供了高可用性、一致性和监控等特点。优点是支持多种编程语言，缺点是需要自行编写客户端代码进行访问，搭建和维护成本相对较高。</span><br><span class="line">3. Consul：Consul是一个轻量级的服务发现和配置管理工具，支持多种语言和容器化技术，并提供可视化界面和分布式锁等特性。优点是易于部署和维护，缺点是相对于ZooKeeper需要更多的资源。</span><br><span class="line">4. etcd：etcd是一个高可用的键值存储系统，支持集群和数据复制机制，可以作为配置管理中心使用。优点是易于使用和集成，支持HTTP/JSON和gRPC两种API访问方式，并支持分布式锁和触发器等特性。缺点是相对于ZooKeeper需要更多的配置和调试。</span><br><span class="line">从功能、易用性、性能以及社区活跃度等方面考虑，用户可以选择适合自己需求的分布式配置管理工具，并结合团队技术水平和资源预算做出决策。</span><br><span class="line"></span><br><span class="line">Nacos和Disconf都是分布式配置管理平台，用于在多节点的环境下集中管理和更新配置信息。</span><br><span class="line">Nacos是阿里巴巴开源的一个服务发现和配置管理平台，支持注册中心、配置中心、DNS解析等多种功能。它提供了对Spring Cloud和Kubernetes等微服务平台的原生支持，同时支持多语言和多协议，易于集成和使用。</span><br><span class="line">Disconf也是由阿里巴巴开源的分布式配置管理平台，支持Java、PHP、C++等多种语言，提供了版本控制、热更新和高可用性等特点。它适用于传统的Web应用程序和基于J2EE技术栈的应用开发，但目前已经不再推荐使用，因为不再维护和更新。</span><br><span class="line">相比之下，Nacos具有更多的优点，例如：</span><br><span class="line">1. 支持多种功能：除了配置管理外，还支持服务注册、发现、健康检查、流量管理和动态DNS解析等多种功能，可以满足分布式系统的各种需求。</span><br><span class="line">2. 更加轻量级和易于扩展：Nacos采用了轻量级的体系结构和插件式架构，易于部署和扩展，同时支持自定义扩展和插件开发。</span><br><span class="line">3. 更加智能和自动化：Nacos支持自动化运维和管理，例如自动备份、恢复和升级等，可以提高开发人员的效率和系统的稳定性。</span><br><span class="line">因此，Nacos是一个更加先进和实用的分布式配置管理平台，值得用户考虑和选择。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">数据库和架构相关的技术名词包括：</span><br><span class="line">1. 关系型数据库（RDBMS）：基于关系模型的数据库，例如MySQL、Oracle、SQL Server等。</span><br><span class="line">2. 非关系型数据库（NoSQL）：非结构化或半结构化的数据库，例如MongoDB、Cassandra、Redis等。</span><br><span class="line">3. 数据库架构：指数据库系统的整体结构，包括物理存储结构、逻辑结构和访问方式等。</span><br><span class="line">4. 分布式数据库：将数据分散存储在多个节点上的数据库，例如HBase、Hadoop、CockroachDB、TiDB等。</span><br><span class="line">5. 数据库设计：指数据库的表结构设计、索引设计、数据类型设计等方面的工作。</span><br><span class="line">高可用集群架构相关的技术名词包括：</span><br><span class="line">1. 集群：将多个服务器组合在一起形成一个逻辑上的单一实体，在实现负载均衡、容灾等方面具有重要作用。</span><br><span class="line">2. 主从复制：将主数据库的所有操作同步到从数据库中，实现数据备份和容灾等功能。</span><br><span class="line">3. 分布式系统：由多个独立计算机组成的系统，这些计算机通过网络连接互相通信和协作，共同完成任务。</span><br><span class="line">4. 负载均衡：通过将请求分发到不同的服务器上，降低单个服务器的负载压力，提高系统的稳定性和可用性。</span><br><span class="line">5. 分布式缓存：将数据缓存在多个节点上，提高系统的读写性能和吞吐量，例如Redis、Memcached等。</span><br><span class="line">6. CAP原则：指在分布式系统中，一致性（Consistency）、可用性（Availability）和分区容错性（Partition Tolerance）三个特性无法同时保证。</span><br><span class="line"></span><br><span class="line">MHA（Master High Availability）和PXC（Percona XtraDB Cluster）都是用于MySQL高可用性的解决方案。</span><br><span class="line"></span><br><span class="line">MHA是由日本DeNA公司开发的一种基于MySQL复制技术的高可用性解决方案。它的主要功能是自动化地将一个MySQL主库切换到另一个备库，以实现快速故障转移和自动化切换。MHA通过监控MySQL主库的状态，检测到主库故障后自动将备库提升为新的主库，并通知客户端连接到新的主库。</span><br><span class="line"></span><br><span class="line">PXC是由Percona公司开发的一种MySQL高可用性解决方案，它使用了Galera Cluster技术，支持多主节点，可以在多个节点之间实现同步复制。PXC的主要特点是采用无共享存储的架构，不需要单独的集群管理器，同时支持读写分离、负载均衡等高级功能。</span><br><span class="line"></span><br><span class="line">相比之下，MHA适用于主从复制的场景，适合那些希望简单实用、易于部署的用户，但缺点是只能实现自动故障转移，不能进行自动扩容。而PXC适用于高并发的多主节点场景，能够提供更高的性能和可靠性，但需要对系统进行较深入的了解和配置，不太适合初学者。</span><br></pre></td></tr></table></div></figure>






]]></content>
  </entry>
  <entry>
    <title>监控web的ssl状态并告警</title>
    <url>/2023/02/27/%E7%9B%91%E6%8E%A7web%E7%9A%84ssl%E7%8A%B6%E6%80%81%E5%B9%B6%E5%91%8A%E8%AD%A6/</url>
    <content><![CDATA[<figure class="highlight py"><div class="table-container"><table><tr><td class="code"><pre><span class="line">shell示例:</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义网站域名和端口号信息</span></span><br><span class="line"><span class="comment">#WebName=&quot;hrss-main.wdeduc.com&quot;</span></span><br><span class="line">WebName=<span class="string">&quot;www.baidu.com&quot;</span></span><br><span class="line">Port=<span class="string">&quot;443&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过 Openssl 工具获取到当前证书的到期时间</span></span><br><span class="line">Cert_END_Time=$(echo | openssl s_client -servername $&#123;WebName&#125; -connect $&#123;WebName&#125;:$&#123;Port&#125; <span class="number">2</span>&gt; /dev/null | openssl x509 -noout -dates | grep <span class="string">&#x27;After&#x27;</span> | awk -F <span class="string">&#x27;=&#x27;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | awk <span class="string">&#x27;&#123;print $1,$2,$4&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将证书的到期时间转化成时间戳</span></span><br><span class="line">Cert_NED_TimeStamp=$(date +%s -d <span class="string">&quot;$Cert_END_Time&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义当前时间的时间戳</span></span><br><span class="line">Create_TimeStamp=$(date +%s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过计算获取到证书的剩余天数</span></span><br><span class="line">Rest_Time=$(expr $(expr $Cert_NED_TimeStamp - $Create_TimeStamp) / <span class="number">86400</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置告警提示信息</span></span><br><span class="line">echo <span class="string">&quot;$WebName  网站的 SSL 证书还有 $Rest_Time 天后到期idc&quot;</span> &gt; ssl-monitor.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义钉钉机器人的 API 接口</span></span><br><span class="line">WebHook=<span class="string">&#x27;https://oapi.dingtalk.com/robot/send?access_token=20e3ec13&amp;label=idc&amp;msg_type=markdown&#x27;</span></span><br><span class="line"><span class="comment">#idc关键字存放于echo里面才能触发告警</span></span><br><span class="line"><span class="comment"># 通过 Curl 命令来发送 Post 请求</span></span><br><span class="line">curl <span class="string">&quot;$&#123;WebHook&#125;&quot;</span> -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> -d <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    &quot;msgtype&quot;: &quot;text&quot;,</span></span><br><span class="line"><span class="string">    &quot;text&quot;: &#123; </span></span><br><span class="line"><span class="string">        &quot;content&quot;: &quot;告警通知&#x27;</span><span class="string">&quot;$(cat ssl-monitor.txt)&quot;</span><span class="string">&#x27;&quot;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> &amp;&gt; ssl_check.log                    </span><br></pre></td></tr></table></div></figure>

<p>图片示例：<br><img src="https://raw.githubusercontent.com/orangefei/imgbed/master/WechatIMG12845.png"></p>
]]></content>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>统计http状态并实现钉钉告警</title>
    <url>/2023/02/27/%E7%BB%9F%E8%AE%A1http%E7%8A%B6%E6%80%81%E5%B9%B6%E5%AE%9E%E7%8E%B0%E9%92%89%E9%92%89%E5%91%8A%E8%AD%A6/</url>
    <content><![CDATA[<figure class="highlight python"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line">weblist=url.<span class="built_in">list</span>                      </span><br><span class="line"><span class="keyword">for</span> <span class="built_in">list</span> <span class="keyword">in</span> `cat $weblist|grep -E -v <span class="string">&quot;#|^$&quot;</span>`               </span><br><span class="line">do</span><br><span class="line">httpcode=`curl -o /dev/null -s -w %&#123;http_code&#125; <span class="string">&quot;$list&quot;</span>`        </span><br><span class="line">httptime=`curl -o /dev/null -s -w <span class="string">&quot;time_connect: %&#123;time_connect&#125;\ntime_starttransfer: %&#123;time_starttransfer&#125;\ntime_total: %&#123;time_total&#125;\n&quot;</span> <span class="string">&quot;$list&quot;</span>|grep time_total|awk -F <span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123;print $2*1000&#125;&#x27;</span>`</span><br><span class="line"><span class="keyword">if</span> [ $httpcode = <span class="number">502</span> ]||[ $httpcode = <span class="number">503</span> ]||[ $httpcode = <span class="number">504</span> ]</span><br><span class="line">then</span><br><span class="line">   <span class="comment">#python /app/script/web_monit/sms.py $list &quot;$list 访问有误!状态码为$httpcode!请收到报警后尽快查看并处理!&quot;</span></span><br><span class="line">curl <span class="string">&#x27;https://oapi.dingtalk.com/robot/send?access_token=a36bb5e3ec13&amp;label=idc&amp;level=Warning&amp;msg_type=markdown&#x27;</span>  -H <span class="string">&quot;Content-Type:application/json&quot;</span>  -d <span class="string">&quot;&#123;\&quot;msgtype\&quot;: \&quot;text\&quot;, </span></span><br><span class="line"><span class="string">    \&quot;text\&quot;: &#123;</span></span><br><span class="line"><span class="string">     \&quot;content\&quot;: \&quot;$list 访问有误!状态码为$httpcode!请收到报警后尽快idc查看并处理!\&quot;&#125;, </span></span><br><span class="line"><span class="string">    \&quot;at\&quot;: &#123;</span></span><br><span class="line"><span class="string">        \&quot;atMobiles\&quot;: [</span></span><br><span class="line"><span class="string">            \&quot;130***61\&quot;, </span></span><br><span class="line"><span class="string">        ], </span></span><br><span class="line"><span class="string">        \&quot;isAtAll\&quot;: false</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   echo <span class="string">&quot;$list is checked ok!&quot;</span></span><br><span class="line">fi</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> [ $httptime -ge <span class="number">10000</span> ]</span><br><span class="line">then</span><br><span class="line">   <span class="comment">#python /app/script/web_monit/sms.py $list &quot; $list访问超时!超时时间为$httptime毫秒!请收到报警后尽快查看并处理!&quot;</span></span><br><span class="line">curl <span class="string">&#x27;https://oapi.dingtalk.com/robot/send?access_token=a36bb53ec13&amp;label=idc&amp;level=Warning&amp;msg_type=markdown&#x27;</span>  -H <span class="string">&quot;Content-Type:application/json&quot;</span>  -d <span class="string">&quot;&#123;\&quot;msgtype\&quot;: \&quot;text\&quot;, </span></span><br><span class="line"><span class="string">    \&quot;text\&quot;: &#123;</span></span><br><span class="line"><span class="string">     \&quot;content\&quot;: \&quot;$list 访问超时!超时时间为$httptime毫秒!请收到报警后尽快查看并处理!\&quot;&#125;, </span></span><br><span class="line"><span class="string">    \&quot;at\&quot;: &#123;</span></span><br><span class="line"><span class="string">        \&quot;atMobiles\&quot;: [</span></span><br><span class="line"><span class="string">            \&quot;130***61\&quot;, </span></span><br><span class="line"><span class="string">        ], </span></span><br><span class="line"><span class="string">        \&quot;isAtAll\&quot;: false</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  echo <span class="string">&quot;$list is connect ok!&quot;</span></span><br><span class="line">fi</span><br><span class="line">done</span><br></pre></td></tr></table></div></figure>

<p>图片实例：</p>
<p><img src="https://raw.githubusercontent.com/orangefei/imgbed/master/WechatIMG12868.png"></p>
]]></content>
      <tags>
        <tag>监控</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云创建ssl报DNS记录值不匹配</title>
    <url>/2023/03/14/%E9%98%BF%E9%87%8C%E4%BA%91%E5%88%9B%E5%BB%BAssl%E6%8A%A5DNS%E8%AE%B0%E5%BD%95%E5%80%BC%E4%B8%8D%E5%8C%B9%E9%85%8D/</url>
    <content><![CDATA[<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">阿里云创建ssl报DNS记录值不匹配</span><br><span class="line">场景描述：阿里云申请一个ssl证书遇到问题，总结</span><br><span class="line">以下是控制台管理选项</span><br><span class="line">SSL 证书</span><br><span class="line">证书管理</span><br><span class="line">免费证书</span><br><span class="line">为解决用户无法获知免费证书剩余额度的问题，从2021年1月1日起，阿里云SSL证书服务将为每个实名的个人主体或者企业主体提供1个自然年内，</span><br><span class="line">免费领取一次包含20张免费证书的资源包。</span><br><span class="line">上传证书</span><br><span class="line">CSR管理</span><br><span class="line">订单管理</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">请根据您的服务器类型选择证书下载：选择nginx</span><br><span class="line">服务器类型</span><br><span class="line">证书格式</span><br><span class="line">操作</span><br><span class="line">Nginx</span><br><span class="line">pem/key</span><br><span class="line">帮助下载</span><br><span class="line">Tomcat</span><br><span class="line">pfx</span><br><span class="line">帮助下载</span><br><span class="line">Apache</span><br><span class="line">crt/key</span><br><span class="line">帮助下载</span><br><span class="line">IIS</span><br><span class="line">pfx</span><br><span class="line">帮助下载</span><br><span class="line">JKS</span><br><span class="line">jks</span><br><span class="line">帮助下载</span><br><span class="line">其他</span><br><span class="line">pem/key</span><br><span class="line">下载</span><br><span class="line">根证书下载</span><br><span class="line">crt/cer</span><br><span class="line">下载</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">一、</span><br><span class="line">遇到的问题：</span><br><span class="line">证书类型	场景	域名验证方式</span><br><span class="line">DV证书	DNS云解析服务与证书申请者属于同一阿里云账号	自动DNS验证：表示您已授权数字证书管理服务修改域名的DNS解析记录，数字证书管理服务会自动在域名控制台的解析记录中添加一条记录，无需您手动添加域名解析记录。</span><br><span class="line">更多信息，请参见DNS云解析服务与证书申请者属于同一阿里云账号。</span><br><span class="line">DNS云解析服务与证书申请者不属于同一阿里云账号	</span><br><span class="line">手工DNS验证：使用该方式时，您需要手动修改域名的DNS解析记录，并在证书绑定域名的域名控制台，添加一条解析记录用于域名所有权验证。</span><br><span class="line">具体操作，请参见手工DNS验证。</span><br><span class="line">文件验证：您需要手动从数字证书管理服务控制台下载一个专用的证书验证文件，然后将该文件上传到站点服务器的指定验证目录。</span><br><span class="line">具体操作，请参见文件验证。</span><br><span class="line">OV或EV证书	不区分	本地邮件验证：在数字证书管理服务控制台提交OV或EV证书申请后，CA中心会在1个工作日</span><br><span class="line">（具体时间以CA中心所在地的时间为准，如遇节假日该时间会顺延）内向您提交证书申请时填写的邮箱中发送证书初审邮件。</span><br><span class="line">收到初审邮件后，您需要根据邮件中提供的域名验证步骤完成域名验证操作。</span><br><span class="line">二、</span><br><span class="line">着重介绍手工dns验证：</span><br><span class="line">手工DNS验证</span><br><span class="line">通过手工DNS验证方式验证域名时，需同时满足以下条件：</span><br><span class="line">证书的域名类型为单域名或通配符域名。</span><br><span class="line">域名通过第三方平台注册，且您有权限修改域名的DNS解析设置（即拥有域名管理权限）。</span><br><span class="line">登录数字证书管理服务控制台，通过以下方式进入域名验证环节。</span><br><span class="line">方式一：提交DV证书申请时，域名验证方式选择手工DNS验证，填写完其他申请信息后，即进入域名验证环节。</span><br><span class="line">方式二：在证书列表中定位到目标证书，在操作列，单击验证，进入域名验证环节。</span><br><span class="line">重要 验证操作，仅在证书状态为待验证时才会显示。</span><br><span class="line">在证书申请面板的验证信息页签，获取验证信息。</span><br><span class="line">验证信息</span><br><span class="line">在您的DNS解析服务器，为域名添加DNS解析记录。</span><br><span class="line">下面以阿里云云解析DNS为例，为您演示为域名添加DNS解析记录的过程，供您参考。</span><br><span class="line">重要 如果您域名对应的DNS域名解析服务不在阿里云，请您前往域名对应的DNS域名解析商添加解析记录。</span><br><span class="line">使用域名持有者所在的阿里云账号，登录云解析DNS控制台。</span><br><span class="line">在域名解析页面，定位到证书绑定的域名，单击域名名称。</span><br><span class="line">在解析设置页面，单击添加记录。</span><br><span class="line">在添加记录面板，将步骤2获取到的验证信息，添加至对应的云解析DNS配置项，单击确认。</span><br><span class="line">添加域名解析记录</span><br><span class="line">添加完成后，您可以在记录列表中查看已添加的记录。该记录默认生效（状态为正常）。解析记录</span><br><span class="line">配置完成解析记录后，返回验证信息页签，单击验证。</span><br><span class="line">DNS验证失败的解决办法，请参见常见问题。</span><br><span class="line">警告 请您在证书签发后再删除域名验证记录，否则会因为没有解析记录导致证书签发失败</span><br><span class="line">三、</span><br><span class="line">阿里云控制台管理:</span><br><span class="line">解析记录类型格式</span><br><span class="line">更新时间：2022-12-02 10:03</span><br><span class="line">产品详情</span><br><span class="line">相关技术圈</span><br><span class="line">我的收藏</span><br><span class="line">类型名称	类型取值	类型定义	类型描述</span><br><span class="line">A记录	A	参考标准；RR值可为空，即@解析；不允许含有下划线；	IPv4地址格式</span><br><span class="line">NS记录	NS	参考标准；RR值不能为空；允许含有下划线；不支持泛解析	NameType形式</span><br><span class="line">MX记录	MX	参考标准；RR值可为空，即@解析；不允许含有下划线	NameType形式，且不可为IP地址。1-10，优先级依次递减。</span><br><span class="line">TXT记录	TXT	参考标准；另外，有效字符除字母、数字、“-”（中横杠）、还包括“_”（下划线）；RR值可为空，即@解析；允许含有下划线；不支持泛解析	字符串；长度小于512,合法字符：大小写字母，数字,空格，及以下字符：-~=:;/.@+^!*</span><br><span class="line">CNAME记录	CNAME	参考标准；另外，有效字符除字母、数字、“-”（中横杠）、还包括“_”（下划线）；RR值不允许为空（即@）；允许含有下划线	NameType形式，且不可为IP</span><br><span class="line">SRV记录	SRV	是一个name，且可含有下划线“_“和点“.”；允许含有下划线；可为空（即@）；不支持泛解析	priority：优先级，为0－65535之间的数字；weight：权重，为0－65535之间的数字；port：提供服务的端口号，为0－65535之间的数字 target：为提供服务的目标地址，为nameType，且存在。参考：https://en.wikipedia.org/wiki/SRV_record http://www.rfc-editor.org/rfc/rfc2782.txt</span><br><span class="line">AAAA记录	AAAA	参考标准；RR值可为空，即@解析；不允许含有下划线；	IPv6地址格式</span><br><span class="line">CAA记录	CAA	参考标准；RR值可为空，即@解析；不允许含有下划线；	格式为：[flag] [tag] [value]，是由一个标志字节的[flag],和一个被称为属性的标签[tag]-值[value]对组成。例如：@ 0 issue &quot;symantec.com&quot;或@ 0 iodef &quot;mailto:admin@aliyun.com&quot;</span><br><span class="line">显性URL转发	REDIRECT_URL	参考标准；RR值可为空，即@解析	NameType或URL地址（区分大小写），长度最长为500字符，其中域名，如example.com，必须，大小写不敏感；协议：可选，如HTTP、HTTPS，默认为HTTP端口：可选，如81，默认为80；路径：可选，大小写敏感，如/path/to/，默认为/；文件名：可选，大小写敏感，如file.php，默认无；参数：可选，大小写敏感，如?user=my***，默认无。</span><br><span class="line">隐性URL转发	FORWARD_URL	参考标准；RR值可为空，即@解析	NameType或URL地址（区分大小写），长度最长为500字符，其中域名，如example.com，必须，大小写不敏感；协议：可选，如HTTP、HTTPS，默认为HTTP端口：可选，如81，默认为80；路径：可选，大小写敏感，如/path/to/，默认为/；文件名：可选，大小写敏感，如file.php，默认无；参数：可选，大小写敏感，如?user=my***，默认无。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">四、</span><br><span class="line">云解析DNS/域名解析/解析设置(如遇DNS记录值不匹配</span><br><span class="line">您可以参考以下步骤，在域名解析服务器删除不匹配解析记录，并重新为该域名添加一条解析记录。</span><br><span class="line">在证书申请面板，单击查看检测到的记录值)</span><br><span class="line"></span><br><span class="line">修改记录</span><br><span class="line">解析记录变更后，可能不会立即生效。因为各地网络运营商 dns 存在缓存，在缓存未到期时，是不会向云解析 DNS 请求最新的解析记录，</span><br><span class="line">而是直接将之前缓存的解析结果返回给访问者，所以需要等待运营商刷新本地缓存后，解析才会实际生效。</span><br><span class="line">解析生效时间主要取决于运营商DNS缓存的解析记录的TTL到期时间，预计最快10-30分钟左右生效。</span><br><span class="line">如进行过DNS服务器名称修改，则一般需要24-48小时左右生效。了解更多</span><br><span class="line">记录类型</span><br><span class="line">主机记录</span><br><span class="line">.baidu.com</span><br><span class="line">_dnsauth.ai</span><br><span class="line">解析请求来源</span><br><span class="line">指访问者所在的地区和其使用的网络运营商</span><br><span class="line">记录值</span><br><span class="line">202303130000005fafg82tgyvjfs7</span><br><span class="line">TTL</span><br><span class="line">10</span><br><span class="line">以上是选择的</span><br><span class="line">TXT记录	TXT	参考标准；另外，有效字符除字母、数字、“-”（中横杠）、还包括“_”（下划线）；RR值可为空，即@解析；允许含有下划线；不支持泛解析	</span><br><span class="line">字符串；长度小于512,合法字符：大小写字母，数字,空格，及以下字符：-~=:;/.@+^!*</span><br><span class="line"></span><br><span class="line">五、</span><br><span class="line">负载均衡配置，可将证书下载到NGINX或者配置在负载均衡</span><br><span class="line">负载均衡 SLB/负载均衡业务配置向导</span><br><span class="line">监听介绍</span><br><span class="line">负载均衡业务配置向导</span><br><span class="line">协议&amp;监听</span><br><span class="line">SSL证书</span><br><span class="line">后端服务器</span><br><span class="line">健康检查</span><br><span class="line">配置审核</span><br><span class="line">配置SSL证书以确保您的业务受到加密保护并得到权威机构的身份认证</span><br><span class="line">本地要运行80 或者443端口</span><br></pre></td></tr></table></div></figure>

<p>图片示例：</p>
<p><img src="https://raw.githubusercontent.com/orangefei/imgbed/master/WechatIMG4558.png"></p>
<p>解决示例：</p>
<p><img src="https://raw.githubusercontent.com/orangefei/imgbed/master/WechatIMG13275.png"></p>
<p>配置示例：</p>
<p><img src="https://raw.githubusercontent.com/orangefei/imgbed/master/WechatIMG13287.png"></p>
]]></content>
  </entry>
</search>
